[
  {
    "objectID": "lectures/lecture-git-github.html#reproducible-research-with-git-and-github",
    "href": "lectures/lecture-git-github.html#reproducible-research-with-git-and-github",
    "title": "Getting Started with Git and GitHub in RStudio",
    "section": "Reproducible research with Git and GitHub",
    "text": "Reproducible research with Git and GitHub"
  },
  {
    "objectID": "lectures/lecture-git-github.html#the-challenge",
    "href": "lectures/lecture-git-github.html#the-challenge",
    "title": "Getting Started with Git and GitHub in RStudio",
    "section": "The Challenge",
    "text": "The Challenge\nAs data analysts, we produce a lot of files\n\ncode\nfigures\ntables\nreports\n\nOrganising these files is an important, albeit often unglamorous, part of our job."
  },
  {
    "objectID": "lectures/lecture-git-github.html#the-challenge-1",
    "href": "lectures/lecture-git-github.html#the-challenge-1",
    "title": "Getting Started with Git and GitHub in RStudio",
    "section": "The Challenge",
    "text": "The Challenge\n\nManaging versions What do you do with old code?\nEnsuring reproducibility Can others reproduce your results? What about your future self?\nFacilitating collaboration Can other team members easily contribute?"
  },
  {
    "objectID": "lectures/lecture-git-github.html#the-old-school-solution",
    "href": "lectures/lecture-git-github.html#the-old-school-solution",
    "title": "Getting Started with Git and GitHub in RStudio",
    "section": "The old school solution 🛵",
    "text": "The old school solution 🛵\nThe old school solution combines many practical strategies:\n\n\nUsing file naming conventions to track different file versions\n\nanalysis-16jun2024.do\nanalysis-19jun2024-mh.do\nanalysis-final.do\nanalysis-final-final.do\n\nNote changes directly in code comments or separate documentation\nUse shared folders, google drive etc\nShare code and code snippets over email, slack etc"
  },
  {
    "objectID": "lectures/lecture-git-github.html#the-old-school-solution-1",
    "href": "lectures/lecture-git-github.html#the-old-school-solution-1",
    "title": "Getting Started with Git and GitHub in RStudio",
    "section": "The old school solution 🛵",
    "text": "The old school solution 🛵\n\nThis is ok(ish) for one person working on a small project. But if the project is large, involves many people or goes on for a long time this approach very quickly breaks down"
  },
  {
    "objectID": "lectures/lecture-git-github.html#the-new-school-solution",
    "href": "lectures/lecture-git-github.html#the-new-school-solution",
    "title": "Getting Started with Git and GitHub in RStudio",
    "section": "The new school solution 🚀",
    "text": "The new school solution 🚀\nThe new school solution is to use dedicated version control software.\nThere are a few options out there but by far the most popular choice is the combination of git + GitHub"
  },
  {
    "objectID": "lectures/lecture-git-github.html#section",
    "href": "lectures/lecture-git-github.html#section",
    "title": "Getting Started with Git and GitHub in RStudio",
    "section": "",
    "text": "Via git-scm.com\n\n\nGit is software for tracking different versions of code files you are working on locally.\n\n\n\nVia logos-world.net\n\n\nGitHub is a cloud-based platform for sharing and collaborating on projects managed with Git"
  },
  {
    "objectID": "lectures/lecture-git-github.html#section-1",
    "href": "lectures/lecture-git-github.html#section-1",
    "title": "Getting Started with Git and GitHub in RStudio",
    "section": "",
    "text": "Illustrations from the Openscapes blog GitHub for supporting, contributing, and failing safely by Allison Horst and Julia Lowndes."
  },
  {
    "objectID": "lectures/lecture-git-github.html#how-does-it-work",
    "href": "lectures/lecture-git-github.html#how-does-it-work",
    "title": "Getting Started with Git and GitHub in RStudio",
    "section": "How does it work?",
    "text": "How does it work?\nCommitting, branching and merging with Git"
  },
  {
    "objectID": "lectures/lecture-git-github.html#how-does-it-work-1",
    "href": "lectures/lecture-git-github.html#how-does-it-work-1",
    "title": "Getting Started with Git and GitHub in RStudio",
    "section": "How does it work?",
    "text": "How does it work?\nCommitting, branching and merging with Git"
  },
  {
    "objectID": "lectures/lecture-git-github.html#how-does-it-work-2",
    "href": "lectures/lecture-git-github.html#how-does-it-work-2",
    "title": "Getting Started with Git and GitHub in RStudio",
    "section": "How does it work?",
    "text": "How does it work?\nSharing versions with GitHub"
  },
  {
    "objectID": "lectures/lecture-git-github.html#how-does-it-work-3",
    "href": "lectures/lecture-git-github.html#how-does-it-work-3",
    "title": "Getting Started with Git and GitHub in RStudio",
    "section": "How does it work?",
    "text": "How does it work?\nSharing versions with GitHub"
  },
  {
    "objectID": "lectures/lecture-git-github.html#it-seems-a-bit-complicated",
    "href": "lectures/lecture-git-github.html#it-seems-a-bit-complicated",
    "title": "Getting Started with Git and GitHub in RStudio",
    "section": "It seems a bit complicated",
    "text": "It seems a bit complicated\n\nVia GIPHY\nIs it worth it?"
  },
  {
    "objectID": "lectures/lecture-git-github.html#yes-it-is-definitely-worth-it",
    "href": "lectures/lecture-git-github.html#yes-it-is-definitely-worth-it",
    "title": "Getting Started with Git and GitHub in RStudio",
    "section": "Yes!! It is definitely worth it!",
    "text": "Yes!! It is definitely worth it!\n\n\nVersion control | Essential for reproducibility\nCollaboration | OpenSAFELY, OHDSI, R package development\nOrganisation | e.g. Code, data & outputs all stored together\nEasy web presence | e.g. any public GitHub repo; these slides!\nGreat for teaching\nPowerful search\nIssue tracking | Hyperlink the bug, discussion about the bug & the solution!\nIt is all free*\n\n\n\n\n*Well, mostly. The free products will cover most academic/research use cases."
  },
  {
    "objectID": "lectures/lecture-git-github.html#lets-check-out-an-example",
    "href": "lectures/lecture-git-github.html#lets-check-out-an-example",
    "title": "Getting Started with Git and GitHub in RStudio",
    "section": "Let’s Check out an example",
    "text": "Let’s Check out an example\n\ngithub.com/CBDRH/vaccineQueueNetworks\n\n\n\nIf reading this at home explore the repo for:\nCommit history\nBranches\nVersion comparison"
  },
  {
    "objectID": "lectures/lecture-git-github.html#lets-check-out-an-example-1",
    "href": "lectures/lecture-git-github.html#lets-check-out-an-example-1",
    "title": "Getting Started with Git and GitHub in RStudio",
    "section": "Let’s check out an example",
    "text": "Let’s check out an example\nYou can even compare difference versions of images!\n\n\nYou can try this example here"
  },
  {
    "objectID": "lectures/lecture-git-github.html#working-locally-git-client",
    "href": "lectures/lecture-git-github.html#working-locally-git-client",
    "title": "Getting Started with Git and GitHub in RStudio",
    "section": "Working locally: Git client",
    "text": "Working locally: Git client\nTo use Git on your computer you need a Git Client. There are heaps of git clients available, with different pros and cons. Here are a few examples:\n\n\n\n1. Command line\n\nTerminal (Mac)\nGit bash (Windows)\nPowerShell (Windows)"
  },
  {
    "objectID": "lectures/lecture-git-github.html#working-locally-git-client-1",
    "href": "lectures/lecture-git-github.html#working-locally-git-client-1",
    "title": "Getting Started with Git and GitHub in RStudio",
    "section": "Working locally: Git client",
    "text": "Working locally: Git client\nTo use Git on your computer you need a Git Client. There are heaps of git clients available, with different pros and cons. Here are a few examples:\n\n\n2. RStudio interface\n\nThis is what we will use!\nCheck out happygitwithr.com"
  },
  {
    "objectID": "lectures/lecture-git-github.html#working-locally-git-client-2",
    "href": "lectures/lecture-git-github.html#working-locally-git-client-2",
    "title": "Getting Started with Git and GitHub in RStudio",
    "section": "Working locally: Git client",
    "text": "Working locally: Git client\nTo use Git on your computer you need a Git Client. There are heaps of git clients available, with different pros and cons. Here are a few examples:\n\n\n3. SAS Enterprise Guide 8 interface\n\nFor SAS users!\nUnderstanding Git Integration in SAS Enterprise Guide"
  },
  {
    "objectID": "lectures/lecture-git-github.html#collaboration-git-hosting-service",
    "href": "lectures/lecture-git-github.html#collaboration-git-hosting-service",
    "title": "Getting Started with Git and GitHub in RStudio",
    "section": "Collaboration: Git hosting service",
    "text": "Collaboration: Git hosting service\nTo enable collaboration you need a Git Hosting service. There are heaps of options with different pros and cons, but the core functionality is usually the same.\n\n\n\nGitHub\n\nWidely used\nLots of resources"
  },
  {
    "objectID": "lectures/lecture-git-github.html#collaboration-git-hosting-service-1",
    "href": "lectures/lecture-git-github.html#collaboration-git-hosting-service-1",
    "title": "Getting Started with Git and GitHub in RStudio",
    "section": "Collaboration: Git hosting service",
    "text": "Collaboration: Git hosting service\nTo enable collaboration you need a Git Hosting service. There are heaps of options with different pros and cons, but the core functionality is usually the same.\n\n\nGitea\n\nA light-weight easy to install option.\nImplemented in SURE and ERICA."
  },
  {
    "objectID": "lectures/lecture-git-github.html#collaboration-git-hosting-service-2",
    "href": "lectures/lecture-git-github.html#collaboration-git-hosting-service-2",
    "title": "Getting Started with Git and GitHub in RStudio",
    "section": "Collaboration: Git hosting service",
    "text": "Collaboration: Git hosting service\nTo enable collaboration you need a Git Hosting service. There are heaps of options with different pros and cons, but the core functionality is usually the same.\n\n\nGitLab\n\nCan be hosted on a private server so ideal for sensitive projects."
  },
  {
    "objectID": "lectures/lecture-git-github.html#key-concept-repository",
    "href": "lectures/lecture-git-github.html#key-concept-repository",
    "title": "Getting Started with Git and GitHub in RStudio",
    "section": "Key concept: Repository",
    "text": "Key concept: Repository\n\n\n\n\nA repository is where the magic happens \n\nReferred to as a repo* \n1 git project = 1 repo\nDatabase of changes to your code (aka diffs)\nHidden folder on your system named .git"
  },
  {
    "objectID": "lectures/lecture-git-github.html#key-concept-commit",
    "href": "lectures/lecture-git-github.html#key-concept-commit",
    "title": "Getting Started with Git and GitHub in RStudio",
    "section": "Key concept: Commit",
    "text": "Key concept: Commit\n\n\n\n\nCommit\n\nA Commit is like clicking save in a MS Word document\nIt saves a snapshot of the code at that point in time\nWhy you commit you must write a message explaining what changed\nCommitting is a two stage process - more on this later"
  },
  {
    "objectID": "lectures/lecture-git-github.html#key-concept-diff",
    "href": "lectures/lecture-git-github.html#key-concept-diff",
    "title": "Getting Started with Git and GitHub in RStudio",
    "section": "Key concept: Diff",
    "text": "Key concept: Diff\n\n\n\n\nDiff\n\nA diff is the set of changes between two versions of a file\nWhen you commit, it is the diff that gets recorded, not the whole version\nThe screenshot highlights a single diff: deletion of the word “clinic”"
  },
  {
    "objectID": "lectures/lecture-git-github.html#workflow-1",
    "href": "lectures/lecture-git-github.html#workflow-1",
    "title": "Getting Started with Git and GitHub in RStudio",
    "section": "Workflow",
    "text": "Workflow"
  },
  {
    "objectID": "lectures/lecture-git-github.html#workflow-2",
    "href": "lectures/lecture-git-github.html#workflow-2",
    "title": "Getting Started with Git and GitHub in RStudio",
    "section": "Workflow",
    "text": "Workflow"
  },
  {
    "objectID": "lectures/lecture-git-github.html#workflow-3",
    "href": "lectures/lecture-git-github.html#workflow-3",
    "title": "Getting Started with Git and GitHub in RStudio",
    "section": "Workflow",
    "text": "Workflow\nHow you actual perform these commands depends on the git client you are using…\n\nWe will use the RStudio Interface"
  },
  {
    "objectID": "lectures/lecture-git-github.html#r-projects",
    "href": "lectures/lecture-git-github.html#r-projects",
    "title": "Getting Started with Git and GitHub in RStudio",
    "section": "R Projects",
    "text": "R Projects\n\nWe use R projects to keep all our code and files organised in a single space\n\n\nArtwork by @allison_horst"
  },
  {
    "objectID": "lectures/lecture-git-github.html#absolute-paths",
    "href": "lectures/lecture-git-github.html#absolute-paths",
    "title": "Getting Started with Git and GitHub in RStudio",
    "section": "Absolute paths",
    "text": "Absolute paths\n\nsetwd(\"/Users/z3509778/Library/CloudStorage/OneDrive-UNSW/Data Vis Workshop/CourseSite\")\n\n\n\n\nIf the first line of your R script is\nsetwd(\"C:\\Users\\jenny\\path\\that\\only\\I\\have\")\nI will come into your office and SET YOUR COMPUTER ON FIRE 🔥.\n\n\n—Jenny Bryan in Project-oriented workflow"
  },
  {
    "objectID": "lectures/lecture-git-github.html#relative-paths-with-herehere",
    "href": "lectures/lecture-git-github.html#relative-paths-with-herehere",
    "title": "Getting Started with Git and GitHub in RStudio",
    "section": "Relative paths with here::here()",
    "text": "Relative paths with here::here()\n\nArtwork by @allison_horst"
  },
  {
    "objectID": "lectures/lecture-git-github.html#mini-exercise",
    "href": "lectures/lecture-git-github.html#mini-exercise",
    "title": "Getting Started with Git and GitHub in RStudio",
    "section": "Mini-Exercise",
    "text": "Mini-Exercise\n\n 3 minutes\n\nAre you here yet?\n\n\n\n\n\n\nEnter here::here() at the console to see your current working directory. This should be where you saved your project!\nEnter here::here(\"exercises\") at the console. What happens?\nEnter list.files(here::here(\"exercises\")) at the console. Note that you don’t need the full path!"
  },
  {
    "objectID": "lectures/lecture-git-github.html#what-files-can-i-track",
    "href": "lectures/lecture-git-github.html#what-files-can-i-track",
    "title": "Getting Started with Git and GitHub in RStudio",
    "section": "What files can I track?",
    "text": "What files can I track?\n\nThis all works best for non-binary or text files e.g. your typical code files (.sas, .do, .R, .Rmd, .py) but also .png, .csv etc\nYou can include non-binary files (.pdf, .docx, .xlsx etc) in a git repo but the diff features won’t work. It can still be useful if using the repo as a central organisation point (e.g. if you save your published manuscript with the analysis code)."
  },
  {
    "objectID": "lectures/lecture-git-github.html#how-often-should-i-commit",
    "href": "lectures/lecture-git-github.html#how-often-should-i-commit",
    "title": "Getting Started with Git and GitHub in RStudio",
    "section": "How often should I commit?",
    "text": "How often should I commit?\n\nWell, it depends.\nJust like when you start writing a word document you might not click save very often as you spew out lots of ideas, but at the end of your thesis you will carefully save every change!\nIt is best practice to keep commits fairly small and related, especially for mature projects."
  },
  {
    "objectID": "lectures/lecture-git-github.html#whats-with-the-staging-area",
    "href": "lectures/lecture-git-github.html#whats-with-the-staging-area",
    "title": "Getting Started with Git and GitHub in RStudio",
    "section": "What’s with the staging area?",
    "text": "What’s with the staging area?\n\nThere are advantages of breaking up the commit into two steps\n\nYou can split a big edit into bite-sized pieces\nEasier to review\nIf you make a mistake you can unstage. You can’t un-commit!"
  },
  {
    "objectID": "lectures/lecture-git-github.html#what-about-my-sensitive-datacode",
    "href": "lectures/lecture-git-github.html#what-about-my-sensitive-datacode",
    "title": "Getting Started with Git and GitHub in RStudio",
    "section": "What about my sensitive data/code?",
    "text": "What about my sensitive data/code?\n\nIf your data are sensitive be very careful not to track with Git (more tips on this later).\nPrivate repos are available if you don’t want the public to see your code (you can change to public later if desired.)\nGit Hosting Services like Gitea are available in secure analysis environments (SURE/ERICA etc)"
  },
  {
    "objectID": "lectures/lecture-git-github.html#how-does-my-repo-align-with-my-project-folder",
    "href": "lectures/lecture-git-github.html#how-does-my-repo-align-with-my-project-folder",
    "title": "Getting Started with Git and GitHub in RStudio",
    "section": "How does my repo align with my project folder?",
    "text": "How does my repo align with my project folder?\n\n\nYou need to actively think about this!\nOption: Root folder of the project\nOption: Specific folder (e.g. just Code/)\nGit ignores files and folders listed in the special .gitignore file"
  },
  {
    "objectID": "lectures/lecture-git-github.html#mini-exercise-1",
    "href": "lectures/lecture-git-github.html#mini-exercise-1",
    "title": "Getting Started with Git and GitHub in RStudio",
    "section": "Mini-Exercise",
    "text": "Mini-Exercise\n\n 15 minutes\n\nFork the exercise repo and practice the git workflow\n\n\n\n\n\nSee Exercises: Day 1. Github\n\nFork the Course Materials\nPractice the add-commit-push workflow"
  },
  {
    "objectID": "lectures/roughwork.html#mini-exercise",
    "href": "lectures/roughwork.html#mini-exercise",
    "title": "Getting Started with Git and GitHub in RStudio",
    "section": "Mini-Exercise",
    "text": "Mini-Exercise\n\n 3 minutes\n\nCreate a new project in RStudio\n\n\n\n\n\n\nIn the top right-hand corner of Rstudio (i) click the arrow and (ii) choose New Project \nSelect New Directory then New Project\nSpecify a directory name and subdirectory\nTick Create a Git Repository"
  },
  {
    "objectID": "lectures/roughwork.html#mini-exercise-1",
    "href": "lectures/roughwork.html#mini-exercise-1",
    "title": "Getting Started with Git and GitHub in RStudio",
    "section": "Mini-Exercise",
    "text": "Mini-Exercise\n\n 3 minutes\n\nAre you here yet?\n\n\n\n\n\n\nEnter here::here() at the console to see your current working directory. This should be where you saved your project!\nEnter here::here(\".gitignore\") at the console. What happens?\nEnter file.exists(here::here(\".gitignore\")) at the console. This should return TRUE. Note that you don’t need the full path to locate the file!\n\n\n\nNote We will talk more about what the .gitignore file actually does later"
  },
  {
    "objectID": "lectures/roughwork.html#mini-exercise-2",
    "href": "lectures/roughwork.html#mini-exercise-2",
    "title": "Getting Started with Git and GitHub in RStudio",
    "section": "Mini-Exercise",
    "text": "Mini-Exercise\n\n 3 minutes\n\nPRactice adding and committing\n\n\n\n\n\n\nCreate and save a new R script code.R"
  },
  {
    "objectID": "exercises/overview.html",
    "href": "exercises/overview.html",
    "title": "Guided exercises",
    "section": "",
    "text": "Artwork by @allison_horst\n\nNow it’s your turn to really get hands-on with the data! Work through the guided exercises. If you get stuck, refer to the notes or to the examples in the lecture slides. If you can’t get unstuck just raise your hand and someone will be there to help!\n\n\n\n Back to top",
    "crumbs": [
      "Guided exercises"
    ]
  },
  {
    "objectID": "under-construction.html",
    "href": "under-construction.html",
    "title": "🚧 Under Construction 🔧",
    "section": "",
    "text": "Back to top"
  },
  {
    "objectID": "home/prerequisites.html",
    "href": "home/prerequisites.html",
    "title": "Getting Started with Git and GitHub in RStudio",
    "section": "",
    "text": "Artwork by @allison_horst\n\nThank you for enrolling in the    Reproducible Data Visualisation with R workshop   \nTo get the most out of the workshop, please run through the checklist below and make sure you have all the necessary software installed in advance. If you are already working with git in RStudio you may be ready to go already. If you are just getting started, keep in mind that these configuration steps can be half the battle. Don’t worry if you get stuck, we are here to help.\n\n\n\n\n\n\n\n\nA note on the key reference\n\n\n\nConfiguring Git, GitHub and RStudio to work together is half the battle when it comes to using Git in RStudio.\nLuckily there is an excellent online reference for this: Happy Git and GitHub for the useR by Jennifer Bryan. The chapters linked below refer to key sections in this book.\nWe won’t have time to configure everybody’s laptop at the workshop so please try to work through these steps in advance! The best strategy is to carefully read the recommended sections in order and follow the directions diligently. But there is a lot of detail to work through so don’t worry if you get stuck—reach out for help!\n\n\n\n\nChecklist:\nCan you tick every item below?\n\nA laptop (and a charger!) \nAt least a basic working knowledge of R and RStudio. If you are a beginner or want a refresh, check out the one-hour webinar A gengle introduction to tidy statistics in R) \nA free GitHub user account. See Ch 4. Register a GitHub account \nA recent version of R (at least v4.3.0) and RStudio (at least a 2024 version) installed on your laptop. See Ch 5. Install or upgrade R and RStudio \nGit installed on your laptop. See Ch 6. Install Git \nSet up a Personal Access Token (PAT) to allow RStudio to communicate with GitHub. See Ch 9. Personal access token for HTTPS and in particular Section 9.1 TL;DR \n\n\n\n\n\n\n\n\n\nSetting up a Personal Access Token\n\n\n\nFollow Section 9.1 TL;DR from Happy Git and GitHub for the useR to set up your Personal Access Token. The easiest way to do this is to run the suggested commands from R. To run these commands you may need to install the usethis and gitcreds packages if they are not installed already. If you get an error message indicating that you don’t have the packages installed you can install them by entering the commands below at the console.\n\ninstall.packages(\"usethis\")\n\n\ninstall.packages(\"gitcreds\")\n\nAs per Section 9.1 TL;DR, the following R commands can be used to set up a Personal Access Token from RStudio.\n\nusethis::create_github_token()\n\n\nEntering a note to describe the tokens use case is useful for identifying and managing tokens. Choose a note that describes your use case, e.g. RStudio projects.\nSet the expiration to 30 days. You can always extend this.\nThe GitHub PAT scope is like a set of permissions that define what actions the token can perform on your behalf on GitHub. You can use the default scopes of workflow, gist, and user.\n\n\ngitcreds::gitcreds_set()\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "home/introduction.html",
    "href": "home/introduction.html",
    "title": "Getting Started with Git and GitHub in RStudio",
    "section": "",
    "text": "Back to top"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Schedule",
    "section": "",
    "text": "The Octocat—an octopus-cat with five appendages—is the beloved GitHub logo. Read more here.\n\n\nSchedule\n\n\n\n\n\n\nTime\nActivity\n\n\n\n\n\n10:00 - 10:10\nWelcome and housekeeping\n\n\n\n10:10 - 10:50\nOverview of Git and GitHub\n🔗\n\n\n10:50 - 11:10\nExercise: Working with Projects in RStudio\n\n\n\n11:10 - 11:20\nMorning tea\n🔗\n\n\n11:20 - 11:45\nExercise: Working with git locally\n🔗\n\n\n11:45 - 12:15\nExercise: Branching and merging\n\n\n\n12:15 - 12:30\nQuestions and close\n🔗\n\n\n\n\n\n\n\n\n\n\nPrerequisites\nThank you for enrolling in the    Git and GitHub in RStudio workshop   \nTo get the most out of the workshop, please run through the checklist below and make sure you have all the necessary software installed in advance. If you are already working with git in RStudio you may be ready to go already. If you are just getting started, keep in mind that these configuration steps can be half the battle. Don’t worry if you get stuck, we are here to help.\n\n\n\n\n\n\n\n\nA note on the key reference\n\n\n\nConfiguring Git, GitHub and RStudio to work together is half the battle when it comes to using Git in RStudio.\nLuckily there is an excellent online reference for this: Happy Git and GitHub for the useR by Jennifer Bryan. The chapters linked below refer to key sections in this book.\nWe won’t have time to configure everybody’s laptop at the workshop so please try to work through these steps in advance! The best strategy is to carefully read the recommended sections in order and follow the directions diligently. But there is a lot of detail to work through so don’t worry if you get stuck—reach out for help!\n\n\n\n\nChecklist:\nCan you tick every item below?\n\nAt least a basic familiarity with R and RStudio. If you are a beginner or want a refresh, check out the one-hour webinar A gengle introduction to tidy statistics in R) \nA free GitHub user account. See Ch 4. Register a GitHub account \nA recent version of R (at least v4.3.0) and RStudio (at least a 2024 version) installed on your laptop. See Ch 5. Install or upgrade R and RStudio \nGit installed on your laptop. See Ch 6. Install Git \nSet up a Personal Access Token (PAT) to allow RStudio to communicate with GitHub. See Ch 9. Personal access token for HTTPS and in particular Section 9.1 TL;DR \n\n\n\n\n\n\n\n\n\nSetting up a Personal Access Token\n\n\n\nFollow Section 9.1 TL;DR from Happy Git and GitHub for the useR to set up your Personal Access Token. The easiest way to do this is to run the suggested commands from R. To run these commands you may need to install the usethis and gitcreds packages if they are not installed already. If you get an error message indicating that you don’t have the packages installed you can install them by entering the commands below at the console.\n\ninstall.packages(\"usethis\")\n\n\ninstall.packages(\"gitcreds\")\n\nAs per Section 9.1 TL;DR, the following R commands can be used to set up a Personal Access Token from RStudio.\n\nusethis::create_github_token()\n\n\nEntering a note to describe the tokens use case is useful for identifying and managing tokens. Choose a note that describes your use case, e.g. RStudio projects.\nSet the expiration to 30 days. You can always extend this.\nThe GitHub PAT scope is like a set of permissions that define what actions the token can perform on your behalf on GitHub. You can use the default scopes of workflow, gist, and user.\n\n\ngitcreds::gitcreds_set()\n\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "exercises/github.html",
    "href": "exercises/github.html",
    "title": "Getting started with git and GitHub",
    "section": "",
    "text": "In this exercise you will:",
    "crumbs": [
      "Getting started with git and GitHub"
    ]
  },
  {
    "objectID": "exercises/github.html#fork-the-repo",
    "href": "exercises/github.html#fork-the-repo",
    "title": "Getting started with git and GitHub",
    "section": "1.1 Fork the repo",
    "text": "1.1 Fork the repo\n\nClick here and follow the instructions to create a personal fork of the workshop materials repo on Github.\nYou should see a message like the one below, except your repo will be tagged with your GitHub username https://github.com/data-viz-workshop/materials-&lt;username&gt;\n\n\n\nThis message indicates you’ve successfully forked the Materials repo\n\n\nOpen this link on a browser and you will be taken to the repo on GitHub. There are a lot of files and folders here, the main files you will use are in the exercises and solutions folders.",
    "crumbs": [
      "Getting started with git and GitHub"
    ]
  },
  {
    "objectID": "exercises/github.html#copy-the-repo-url",
    "href": "exercises/github.html#copy-the-repo-url",
    "title": "Getting started with git and GitHub",
    "section": "1.2 Copy the repo url",
    "text": "1.2 Copy the repo url\n\nClick on the  Code button and copy-paste the HTTPS url to your clipboard.",
    "crumbs": [
      "Getting started with git and GitHub"
    ]
  },
  {
    "objectID": "exercises/github.html#use-the-repo-url-to-create-a-new-project-in-rstudio",
    "href": "exercises/github.html#use-the-repo-url-to-create-a-new-project-in-rstudio",
    "title": "Getting started with git and GitHub",
    "section": "1.3 Use the repo url to create a new project in RStudio",
    "text": "1.3 Use the repo url to create a new project in RStudio\n\nIn RStudio, create a new project by clicking in the top-right hand corner and selecting New Project…\n\nSelect Version Control then Git.\n\n\n\n\n\n\n\n\n\n\nChoose Version Control\n\n\n\n\n\n\n\nThen choose Git\n\n\n\n\n\n\nPaste your repo url in the Repository URL field.\n\nThe Project directory name will be the name of the folder on your laptop so choose something sensible, e.g. Materials.\nFinally, select the field Create project as subdirectory of. This is where the Materials folder will be stored on your laptop. If you move the folder later it will break the link with GitHub, that can be fixed but it is easier to just choose somewhere sensible now.\n\n\n\n\n\n\n\n\n\nCheckpoint\n\n\n\nIf you have successfully completed this step you should see the name of your project in RStudio",
    "crumbs": [
      "Getting started with git and GitHub"
    ]
  },
  {
    "objectID": "exercises/github.html#open-the-practice-file",
    "href": "exercises/github.html#open-the-practice-file",
    "title": "Getting started with git and GitHub",
    "section": "2.1 Open the practice file",
    "text": "2.1 Open the practice file\nUsing the RStudio Files Pane, navigate to the folder exercises/1-code and open the file 0-practice-git-workflow.txt\n\n\n\nNavigate to exercises/1-code/0-practice-git-workflow.txt and open the file\n\n\nThe file should look like this. We are going to use this template to practice the git workflow.\n\n\n\n0-practice-git-workflow.txt\n\n# My favourite snack\n\n\n# Ingredients\n\n\n# Instructions",
    "crumbs": [
      "Getting started with git and GitHub"
    ]
  },
  {
    "objectID": "exercises/github.html#edit-the-file",
    "href": "exercises/github.html#edit-the-file",
    "title": "Getting started with git and GitHub",
    "section": "2.2 Edit the file",
    "text": "2.2 Edit the file\n\nWrite in the name of your snack in the appropriate section.\nThe example is showing Gambas Pil Pil but you should choose your favourite!\nDon’t worry about Ingredients or Instructions for now\nMake sure to save the file when you are done.\n\n\n\n\n‘Pil pil’ is a word used in Spanish and Basque cuisines that describes a sauce made with garlic and chilli infused in hot olive oil. Some say ‘pil pil’ is the sound of popping garlic as it cooks in the hot oil.\nflawlessfood.co.uk/gambas-pil-pil/\n\n\n\n0-practice-git-workflow.txt\n\n# My favourite snack\nGambas Pil Pil (Garlic and Chilli Prawns)\n\n# Ingredients\n\n\n# Instructions",
    "crumbs": [
      "Getting started with git and GitHub"
    ]
  },
  {
    "objectID": "exercises/github.html#git-add-the-file",
    "href": "exercises/github.html#git-add-the-file",
    "title": "Getting started with git and GitHub",
    "section": "2.3 git add the file",
    "text": "2.3 git add the file\nIn the RStudio Git Pane, tick the box next to the 0-practice-git-workflow.txt. This adds your edited file to the staging area.\n\n\n\nClick the box next to file to add the file to the staging area",
    "crumbs": [
      "Getting started with git and GitHub"
    ]
  },
  {
    "objectID": "exercises/github.html#git-commit-the-file",
    "href": "exercises/github.html#git-commit-the-file",
    "title": "Getting started with git and GitHub",
    "section": "2.4 git commit the file",
    "text": "2.4 git commit the file\n\nClick on the Commit button to commit the file\nThis will launch a dialogue box\nAdd a commit message\nClick commit\n\n\n\n\nAdd a commit messge then click commit",
    "crumbs": [
      "Getting started with git and GitHub"
    ]
  },
  {
    "objectID": "exercises/github.html#git-push-the-file",
    "href": "exercises/github.html#git-push-the-file",
    "title": "Getting started with git and GitHub",
    "section": "2.5 git push the file",
    "text": "2.5 git push the file\n\nClick on the Push button to push the file\nIf it runs successfully you should get a dialogue box that looks something like this (which you can then close).\n\n\n\n\nA successful push to the remote repo\n\n\n\nPay attention to the messages that pop up here: if something goes wrong you may see an error\nIf you see the message “Everything up-to-date” make sure you fully completed the commit step by clicking Commit after adding your commit message in the previous box\n\n\n\n\n\n\n\n\n\nCheckpoint\n\n\n\nIf this has all worked smoothly you should see your recent commit message when you view your repo on GitHub\n\n\n\nYour changes will be in the exercises folder",
    "crumbs": [
      "Getting started with git and GitHub"
    ]
  },
  {
    "objectID": "exercises/github.html#add-your-ingredients",
    "href": "exercises/github.html#add-your-ingredients",
    "title": "Getting started with git and GitHub",
    "section": "2.6 Add your ingredients",
    "text": "2.6 Add your ingredients\n\n\n\n0-practice-git-workflow.txt\n\n# My favourite snack\nGambas Pil Pil (Garlic and Chilli Prawns)\n\n# Ingredients\n- Prawns \n- Garlic\n- Chilli\n- Oil\n- Bread\n\n# Instructions\n\n\n\nEdit the file to include the ingredients for your snack\nSave the file\nRepeat the steps above to git add, commit and push the file to GitHub\nConfirm you can see your changes on GitHub\n\n\n\n\nConfirm you can see your changes on GitHub",
    "crumbs": [
      "Getting started with git and GitHub"
    ]
  },
  {
    "objectID": "exercises/github.html#add-your-instructions",
    "href": "exercises/github.html#add-your-instructions",
    "title": "Getting started with git and GitHub",
    "section": "2.7 Add your instructions",
    "text": "2.7 Add your instructions\n\n\n\n0-practice-git-workflow.txt\n\n# My favourite snack\nGambas Pil Pil (Garlic and Chilli Prawns)\n\n# Ingredients\n- Prawns \n- Garlic\n- Chilli\n- Oil\n- Parsley\n- Bread\n\n# Instructions\n\n- Heat the oil with the garlic and chilli\n- Add the prawns\n- Garnish with parsley\n- Serve with bread\n\n\n\nEdit the file to include the instructions to prepare your snack\nSave the file\nRepeat the steps above to git add, commit and push the file to GitHub\nConfirm you can see your changes on GitHub\n\n\n\n\nConfirm you can see your changes on GitHub\n\n\n\n\nMade it this far? Nailed it!\n\n\n\nvia GIPHY",
    "crumbs": [
      "Getting started with git and GitHub"
    ]
  },
  {
    "objectID": "lectures/overview.html",
    "href": "lectures/overview.html",
    "title": "Lectures",
    "section": "",
    "text": "Artwork by @allison_horst\n\n\nVersion control with Git and GitHub\n\nView slides in full screen\n\n\nData cleaning with dplyr\n\nView slides in full screen\n\n\nData visualisation with ggplot2\n\nView slides in full screen\n\n\nStorytelling with data\n\nView slides in full screen\n\n\nLiterate programming with rmarkdown\n\nView slides in full screen\n\n\n\n\n Back to top"
  }
]