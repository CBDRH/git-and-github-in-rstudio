---
format: 
  revealjs:
    theme: [night, ../custom.scss]
    highlight-style: monokai
slide-number: c/t
---

## `Git` and `GitHub` in RStudio {.title-slide}

![](https://octodex.github.com/images/total-eclipse-of-the-octocat.jpg)


# Introductions - About me

## 

:::: {.columns}

::: {.column width=50%}
![](../images/octocat-mh.png)

::: {.figLab}
Personalised octocat from [myoctocat.com](https://myoctocat.com/)
:::

:::

::: {.column width=50% .incremental}

Hi, I'm Mark

* Statistician

* Centre for Big Data Research in Health UNSW

* Analysing linked data

* Data visualisation

* Reproducible research software and workflows

:::

::::


## {background-image="../images/sheep-cairns.jpg" background-size="contain"}

## {background-image="../images/cairns.jpg" background-size="contain"}

## {background-image="../images/kayak.jpg" background-size="contain"}

## {background-image="../images/molly-snoozy.png" background-size="contain"}


# Introductions - About you!

## What institution are you from?

```{r}
library(dplyr)
library(ggwordcloud)
library(ggplot2)

df <- read.csv("../participant-data.csv")

# Organisation
set.seed(12)
df |> 
  group_by(uni) |> 
  summarise(n = n()) |> 
  mutate(
    angle = 45 * sample(-2:2, n(), replace = TRUE, prob = c(1, 1, 4, 1, 1)),
    col = factor(sample.int(10, n(), replace = TRUE))
    )  |> 
    ggplot(aes(label = uni, size = n, angle = angle, color = col)) +
      geom_text_wordcloud() +
      scale_radius(range = c(5, 15), limits = c(0, NA)) +
      theme_minimal() + 
  theme(plot.background = element_rect(fill = "#111111", colour = "transparent"))
```

## What's your role?

```{r}
df |> 
  group_by(role) |> 
  summarise(n = n()) |> 
  mutate(
    angle = 45 * sample(-2:2, n(), replace = TRUE, prob = c(1, 1, 4, 1, 1)),
    col = factor(sample.int(10, n(), replace = TRUE))
  )  |> 
  ggplot(aes(label = role, size = n, angle = angle, color = col)) +
  geom_text_wordcloud() +
  scale_radius(range = c(5, 15), limits = c(0, NA)) +
  theme_minimal() + 
  theme(plot.background = element_rect(fill = "#111111", colour = "transparent"))
```

## What software do you use? 

```{r}
df |> 
  group_by(software) |> 
  summarise(n = n()) |> 
  arrange(n) |> 
  mutate(software = factor(software, 
                           levels = c('Python', 'Stata', 'SAS', 'R'))) |>
  ggplot(aes(y = software, x = n)) +
  geom_col(fill = "#e7ad52") +
  scale_x_continuous(NULL) +
  scale_y_discrete(NULL) +
  theme_minimal() + 
  theme(
    plot.background = element_rect(fill = "#111111", colour = "transparent"),
    axis.text = element_text(color = "grey90", size = 28))
```

## How familiar are you with RStudio?

```{r}
df |> 
  group_by(rstudio) |> 
  summarise(n = n()) |> 
  arrange(n) |> 
  mutate(rstudio = factor(rstudio, 
                      levels = c("Have done complex data analysis",
                                 "Have used it to make a simple figure",
                                 "No experience"), 
                      labels = c("Have done complex\ndata analysis",
                                 "Have used it to make\na simple figure",
                                 "No experience"))) |> 
  ggplot(aes(y = rstudio, x = n)) + 
  geom_col(fill = "#e7ad52") +
  scale_x_continuous(NULL, breaks = c(0, 5,10)) +
  scale_y_discrete(NULL) +
  theme_minimal() + 
  theme(
    plot.background = element_rect(fill = "#111111", colour = "transparent"),
    axis.text = element_text(color = "grey90", size = 28))
```


## How familiar are you with Git?

```{r}
df |> 
  group_by(git) |> 
  summarise(n = n()) |> 
  arrange(n) |> 
  mutate(git = factor(git, 
                       levels = c("Have created my own GitHub repository to store code but don't use Git very often when I code",
                                  "Have only looked at other people's GitHub repositories",
                                  "No experience"),
                       labels = c("Have created my own repo\nbut don't use Git often",
                                  "Have only looked at\nother people's repos",
                                  "No experience"
                                  ))) |>
  ggplot(aes(y = git, x = n)) +
  geom_col(fill = "#e7ad52") +
  scale_x_continuous(NULL, breaks = c(0, 5,10)) +
  scale_y_discrete(NULL) +
  theme_minimal() + 
  theme(
    plot.background = element_rect(fill = "#111111", colour = "transparent"),
    axis.text = element_text(color = "grey90", size = 28))
```

# Motivation: Why learn Git and GitHub?

## The Challenge

As data analysts, we produce a lot of files

* code 
* figures 
* tables 
* reports 

Organising these files is an important, albeit often unglamorous, part of our job.  

## The Challenge

::: {.incremental}

* **Managing versions** What do you do with old code? 

* **Ensuring reproducibility** Can others reproduce your results? What about your future self? 

* **Facilitating collaboration** Can other team members easily contribute?

:::

## The old school solution 🛵 {.smaller}

The old school solution combines many practical strategies:

::: {.incremental}
* Using file naming conventions to track different file versions 

    * analysis-16may2025.R 
    * analysis-19may2025-mh.R 
    * analysis-final.R 
    * analysis-final-final.R

* Note changes directly in code comments or separate documentation

* Use shared folders, google drive etc 

* Share code and code snippets over email, slack etc

:::


## The old school solution 🛵

> This is ok(ish) for 1-2 people working on a small project. But if the project is **large**, involves **many people** or goes on for a **long time** this approach very quickly breaks down 

## The new school solution 🚀

The new school solution is to use dedicated **version control software**. 

There are a few options out there but by far the most popular choice is the combination of **git** + **GitHub**

## {background-color=white}

:::: {.columns}

::: {.column width="50%"}
<img src="../images/git-logo.png" style="width: 100%">

::: {.figLab}
[Via git-scm.com](https://git-scm.com/)
:::

<br>

Git is software for tracking different versions of code files you are working on **locally**. 
:::



::: {.column width="50%"}

<img src="../images/github-logo.png" style="width: 60%">

::: {.figLab}
[Via logos-world.net](https://logos-world.net/wp-content/uploads/2020/11/GitHub-Logo-700x394.png)
:::

<br>

GitHub is a **cloud-based** platform for sharing and collaborating on projects managed with Git 
:::

::::


## {.center-slide}

![](../images/horst/git-commit.png)

::: {.figLab}

Illustrations from the [Openscapes](https://www.openscapes.org/) blog [GitHub for supporting, contributing, and failing safely](https://www.openscapes.org/blog/2022/05/27/github-illustrated-series/) by Allison Horst and Julia Lowndes.

:::


## How does it work?

### Committing, branching and merging with Git

![](../images/commit-gif-end.png)


## How does it work?

### Committing, branching and merging with Git

![](../images/commit.gif)




## How does it work?

### Collaborating with GitHub

![](../images/push-gif-end.png)

## How does it work?

### Collaborating with GitHub

![](../images/push.gif)


## It seems a bit complicated {.center-slide}

![](https://media.giphy.com/media/kaq6GnxDlJaBq/giphy.gif)

<a class = figLab href="https://giphy.com/gifs/chloe-concerned-kaq6GnxDlJaBq/">Via GIPHY</a>

_Is it worth it?_


## Yes!! It is definitely worth it! 

::: {.incremental}

1. **Version control** | Essential for reproducibility

1. **Collaboration** | [OpenSAFELY](https://github.com/opensafely), [OHDSI](https://github.com/OHDSI/Atlas), [R package development](https://github.com/tidyverse/tidyverse)

1. **Organisation** | e.g. Code, data & outputs all stored together

1. **Easy web presence** | e.g. any public GitHub repo; these slides! 

1. **Great for teaching** 

1. **Powerful search** 

1. **Issue tracking** | Hyperlink the bug, discussion about the bug & the solution!

1. **It is all _free_\***  

:::

. . . 

::: {.figLab} 
*Well, mostly. The free products will cover most academic/research use cases. 
:::


## Let's Check out an example

::: {.figLab}

[github.com/CBDRH/vaccineQueueNetworks](https://github.com/CBDRH/vaccineQueueNetworks)

:::

:::: {.columns}

::: {.column width=34%}

If reading this at home explore the repo for: 

[Commit history](https://github.com/CBDRH/vaccineQueueNetworks/commits/main)

[Branches](https://github.com/CBDRH/vaccineQueueNetworks/network)

[Version comparison](https://github.com/CBDRH/vaccineQueueNetworks/commit/c0c56a376555b127279e5e0d9786b93b073f9dc7)

:::

::: {.column width=66%}

[![](../images/vax-homepage.png)](https://github.com/CBDRH/vaccineQueueNetworks)

:::

::::

## Let's check out an example

You can even compare difference versions of images! 

:::: {.columns}

::: {.column width=34%}

You can try this example [here](https://github.com/MarkHanly/getting-started-with-git-and-github/commit/6a071a9c63ee211e63417efba10a24042d0b0db3)

:::

::: {.column  width=66%}

![](../images/image-comparison.gif)

:::

::::


# Interfacing with Git

![](https://octodex.github.com/images/collabocats.jpg)


## Working locally: **Git client**

To use Git on your computer you need a _Git Client_. There are [heaps](https://git-scm.com/downloads/guis) of git clients available, with different pros and cons. Here are a few examples:

. . . 

:::: {.columns}

::: {.column width=34%}

### 1. Command line 

* Terminal (Mac) 
* Git bash (Windows) 
* PowerShell (Windows)
* RStudio Terminal

:::

::: {.column width=66%}

![](../images/git-bash.png)

:::

::::



## Working locally: **Git client**

To use Git on your computer you need a _Git Client_. There are [heaps](https://git-scm.com/downloads/guis) of git clients available, with different pros and cons. Here are a few examples:

:::: {.columns}

::: {.column width=34%}

### 2. RStudio interface

* This is what we will use!
* Check out [happygitwithr.com](https://happygitwithr.com/)

:::

::: {.column width=66%}

![](../images/rstudio-pane.png)

:::

::::

## Working locally: **Git client**

To use Git on your computer you need a _Git Client_. There are [heaps](https://git-scm.com/downloads/guis) of git clients available, with different pros and cons. Here are a few examples:

:::: {.columns}

::: {.column width=34%}

### 3. SAS Enterprise Guide 8 interface

* For SAS users! 
* [Understanding Git Integration in SAS Enterprise Guide](https://documentation.sas.com/doc/en/egcdc/8.2/egdoccdc/egug/p1ov5qodzk4ur2n1r200wdr5jz75.htm)

:::

::: {.column width=66%}

![](../images/sas-interface.png)

:::

::::


## Collaboration: **Git hosting service**

To enable collaboration you need a _Git Hosting service_. There are heaps of [options](https://git.wiki.kernel.org/index.php/GitHosting) with different pros and cons, but the core functionality is usually the same.  

. . . 

:::: {.columns}

::: {.column width=34%}

### GitHub

* Widely used

* Lots of resources

:::

::: {.column width=66%}

![](../images/github-mark-white.png)

:::

::::


## Collaboration: **Git hosting service**

To enable collaboration you need a _Git Hosting service_. There are heaps of [options](https://git.wiki.kernel.org/index.php/GitHosting) with different pros and cons, but the core functionality is usually the same.  

:::: {.columns}

::: {.column width=34%}

### Gitea

* A light-weight easy to install option.

* Implemented in SURE and ERICA. 

:::

::: {.column width=66%}

![](../images/gitea-logo.png)

:::

::::


## Collaboration: **Git hosting service**

To enable collaboration you need a _Git Hosting service_. There are heaps of [options](https://git.wiki.kernel.org/index.php/GitHosting) with different pros and cons, but the core functionality is usually the same.  

:::: {.columns}

::: {.column width=34%}

### GitLab

* Can be hosted on a private server so ideal for sensitive projects.

:::

::: {.column width=66%}

![](../images/gitlab-logo-400.png)

:::

::::

# Key concepts

## Key concept: R Projects

>We use R projects to keep all our code and files organised in a single space

![[Artwork by @allison_horst](https://twitter.com/allison_horst)](../images/horst/rproject-skater.png){align='center'}


<!-- Mini Exercise 1. Create a New Repo -->

## Mini-Exercise

::: {.clock}

{{< fa clock >}} 3 minutes

:::

### Create a new project in RStudio

:::: {.columns}

::: {.column width=25%}

<iframe style="width:100%;max-width:360px;height:360px;" src="https://stopwatch-app.com/widget/timer?theme=dark&color=yellow&hrs=0&min=3&sec=0" frameborder="0"></iframe>
  
:::

::: {.column width=75%}

1. In the top right-hand corner of Rstudio (i) click the arrow and (ii) choose **New Project** <span><img src="/images/rstudio-new-project.png"/></span>
1. Select **New Directory** then **New Project**
1. Set the directory name to **Exercise 1** and choose a sensible subdirectory location (this is where the project will live on your computer)
1. Tick ✅ **Create a Git Repository**
1. Click **Create Project**
:::
::::


## Key concept: Absolute paths 

```{r}
#| echo: true
#| eval: false

setwd("/Users/z3509778/Library/CloudStorage/OneDrive-UNSW/Data Vis Workshop/CourseSite")

```

. . . 

<br>

> If the first line of your R script is
>
> `setwd("C:\Users\jenny\path\that\only\I\have")`
>
> I will come into your office and SET YOUR COMPUTER ON FIRE 🔥.

::: {.figLab}

---Jenny Bryan in [Project-oriented workflow](https://www.tidyverse.org/blog/2017/12/workflow-vs-script/)

:::


## Key concept: Relative paths with `here::here()`

![[Artwork by @allison_horst](https://twitter.com/allison_horst)](../images/horst/here-here.png){align='center'}


<!-- Mini Exercise 2. Are you here -->

## Mini-Exercise

::: {.clock}

{{< fa clock >}} 3 minutes

:::

### Are you `here` yet?

:::: {.columns}

::: {.column width=25%}

<iframe style="width:100%;max-width:360px;height:360px;" src="https://stopwatch-app.com/widget/timer?theme=dark&color=yellow&hrs=0&min=3&sec=0" frameborder="0"></iframe>
  
:::

::: {.column width=75%}


1. Make sure you are working in the R Project you created earlier <span><img src="/images/project-exercise1.png" height="28pts" style="vertical-align: middle;"/></span> 

1. Enter `here::here()` at the console to see your current working directory. This should be where you saved your project!

1. Enter `here::here(".gitignore")` at the console. What happens?

1. Enter `file.exists(here::here(".gitignore"))` at the console. This should return `TRUE`. Note that you don't need the full path to locate the file! 

:::
::::

::: {.figLab}
**Note** We will talk more about what the `.gitignore` file actually does later
:::


## Key concept: Repository 

:::: {.columns}

::: {.column}

![](../images/repo-example.png)

:::

::: {.column .incremental}

### A repository is where the magic happens {{<fa wand-magic-sparkles >}}

* Referred to as a **repo**
* 1 git project = 1 repo = 1 RStudio Project
* Database of changes to your code (aka _diffs_)
* Hidden folder on your system named **.git**

:::

::::


## Key concept: Commit 

:::: {.columns}

::: {.column}

![](../images/commit-diagram.png)

:::

::: {.column .incremental}

### Commit

* A Commit is like clicking save in a MS Word document 

* It saves a snapshot of the code at that point in time 

* Why you commit you must write a message explaining what changed

* Committing is a two stage process...

:::

::::

## Key concept: Staging area

You can only commit files that have been `added to the staging area`

. . .

::: {.incremental}

There are a few advantages to breaking commits into two steps:

* You can split a big edit into bite-sized pieces 

* Easier to review

* If you make a mistake you can _unstage_. You can't un-commit!

:::

<!-- Mini Exercise 3. Practice add-commit workflow -->

## Mini-Exercise

::: {.clock}

{{< fa clock >}} 3 minutes

:::

### Try adding and committing

:::: {.columns}

::: {.column width=25%}

<iframe style="width:100%;max-width:360px;height:360px;" src="https://stopwatch-app.com/widget/timer?theme=dark&color=yellow&hrs=0&min=3&sec=0" frameborder="0"></iframe>
  
:::

::: {.column width=75%}

::: {.panel-tabset}

### Task

1. Make sure you are working in the R Project you created earlier <span><img src="/images/project-exercise1.png" height="28pts" style="vertical-align: middle;"/></span> 

1. Create and save a new text file named `recipe.txt` (File > New File > Text File). You should be able to see the new file in the Git panel <i class="fa-solid fa-camera"></i>

1. In the Git panel, tick the box next to `recipe.txt` to add the file to the staging area <i class="fa-solid fa-camera"></i>

1. Click the commit icon <span><img src="/images/commit-icon.png" height="28pts" style="vertical-align: middle;"/></span> to commit the file. Add a sensible message then click **Commit** <i class="fa-solid fa-camera"></i>

### <i class="fa-solid fa-camera"></i> New File

![](../images/exercise1-newfile.png)

### <i class="fa-solid fa-camera"></i> Add

![](../images/exercise1-add.png)

### <i class="fa-solid fa-camera"></i> Commit

![](../images/exercise1-commit.png)

:::


:::
::::


## Key concept: The `.gitignore` file

You can tell git to ignore specific files and folders by listing them in a special file: `.gitignore`

. . . 

The default `.gitignore` file for R projects list files that are specific to your configuration---these are personal so we don't want to share them. 

```
.Rproj.user
.Rhistory
.RData
.Ruserdata
```

. . . 

`.gitignore` also recognises patterns: 

 
* `*.xlsx` (ignore all xlsx files)
* `*.Rda` (ignore all .Rda files)
* `/Data` (ignore everything in the folder named Data)

<!-- Mini Exercise 5. .gitignore file -->

## Mini-Exercise 

::: {.clock}

{{< fa clock >}} 3 minutes

:::

### The `.gitignore` file

:::: {.columns}

::: {.column width=25%}

<iframe style="width:100%;max-width:360px;height:360px;" src="https://stopwatch-app.com/widget/timer?theme=dark&color=yellow&hrs=0&min=3&sec=0" frameborder="0"></iframe>
  
:::

::: {.column width=75%}

1. Make sure you are working in the R Project you created earlier <span><img src="/images/project-exercise1.png" height="28pts" style="vertical-align: middle;"/></span> 

1. Create and save a new file `private.txt` (File > New File > Text File). Git should automatically detect the new file so you should see the file appear in the git panel. 

1. Open the `.gitignore` file and add the text `private.txt` on a new line. Click save.

Once you ignore the file it is no longer being tracked and it should disappear from the git panel. 

:::
::::


# Workflow

## Cloning from GitHub to RStudio

![](../images/workflow-clone.gif)

## Cloning from GitHub to RStudio

![](../images/workflow-clone-last.png)

## Forking in GitHub

![](../images/workflow-fork.gif)

## Forking in GitHub

![](../images/workflow-fork-last.png)

## Branching

![](../images/workflow-branch.gif)

## Branching

![](../images/workflow-branch-last.png)


# Demo and exercise: Clone a repo from Git


# Frequently asked questions 

## What files can I track?  

. . . 

This all works best for non-binary or text files e.g. your typical code files (.sas, .do, .R, .Rmd, .py) but also .png, .csv etc

You can include non-binary files (.pdf, .docx, .xlsx etc) in a git repo but the diff features won't work. It can still be useful if using the repo as a central organisation point (e.g. if you save your published manuscript with the analysis code). 


## How often should I commit? 

. . . 

Well, it depends.

Just like when you start writing a word document you might not click save very often as you spew out lots of ideas, but at the end of your thesis you will carefully save every change! 

It is best practice to keep commits fairly small and related, especially for mature projects. 



## What about my sensitive data/code? 

. . . 

::: {incremental}
* If your data are sensitive be very careful not to track with Git 

* Private repos are available if you don't want the public to see your code (you can change to public later if desired.)

* Git Hosting Services like Gitea are available in secure analysis environments (SURE/ERICA etc)
:::


## How does my repo align with my project folder?

. . . 

* You need to actively think about this!

* Option: Root folder of the project

* Option: Specific folder (e.g. just `Code/`)

* Git ignores files and folders listed in the special `.gitignore` file


# Closing thoughts

## Next steps for the Medicines Intelligence CRE?

![](https://octodex.github.com/images/socialite.jpg){width=50%}

. . .

* Setting up/joining an Organisational GitHub account?
* Advocating for Gitea in your secure analysis environment?
* Setting up a repo for shared code? 
* Tracking your next analysis with Git/GitHub?

## Any final questions? 

. . .

Please complete the post-event survey! ❤️

![](../images/QRCode for MI-CRE Getting started with Git and GitHub - Post-workshop evaluation.png){width=50%}
