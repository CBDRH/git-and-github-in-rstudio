{
  "hash": "2160ab3f1233f9705cb9088044239d87",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Part 4. Adding a bespoke legend\"\nformat: \n  html:\n    execute:\n      echo: true\n      warning: false\n      results: hide\nnumber-sections: true   \nfilters:\n  - line-highlight\n---\n\n::: {.cell}\n\n:::\n\n\n# Overview\n\nWe are nearly there! In this section we will add a bespoke legend to the plot.\n\n<hr>\n\n# Turn the legend back on\n\nWe previously turned off the legend by setting `legend.position = \"none\"` in our `theme()`. If we remove that line of code this is what we get.\n\n\n::: {.cell}\n\n```{.r .numberLines .cell-code  code-fold=\"true\"}\n# Turn on legend\nggplot(\n  data=df1Plot,\n  aes(x = percent, \n      y = fct_reorder(state, totalHealthy), \n      fill = status,\n      color = status,\n      label = paste0(format(percent, nsmall=1), '%'))) + \n  geom_col(position = position_stack(reverse = TRUE),\n           color = \"white\") +\n  geom_text(\n    position = position_stack(reverse = TRUE),\n    size = 8/.pt, \n    hjust = 1.1) +\n  scale_fill_manual(name = NULL, values = barCols) +\n  scale_colour_manual(name = NULL, values = label_text_colors) +\n  scale_y_discrete(NULL) +\n  scale_x_continuous(NULL) +\n  labs(\n    title = 'Victorians most likely to rate their health as <span style=\"color: #1A9641;\">**Excellent**</span> or <span style=\"color: #A6D96A;\">**Very Good**</span>',\n    subtitle = 'Self-assessed health status by states and territories',\n    caption = 'Source: National Health Survey, 2022') +\n  theme(\n    plot.title.position = 'plot',\n    plot.title = element_markdown(size=14, vjust=2),\n    plot.subtitle = element_text(size=10, color = 'grey30', face = 'bold'),\n    plot.caption = element_text(size=8, color = 'grey60'),\n    panel.background = element_blank(),\n    axis.ticks.y = element_blank()\n  )\n```\n\n::: {.cell-output-display}\n![](exercise3-5_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n:::\n\n\n\nThis is a combined legend for the bar colours and the text label colours (those are the little \"a\"s in the legend boxes).\n\n<hr>\n\n# Remove the text label legend\n\nThe text label colours don't add much information and are a bit unsightly. We can quickly get rid of them by setting `show.legend = FALSE` within `geom_text()`. \n\n\n::: {.cell source-line-numbers='14'}\n\n```{.r .numberLines .cell-code  code-fold=\"true\"}\nggplot(\n  data=df1Plot,\n  aes(x = percent, \n      y = fct_reorder(state, totalHealthy), \n      fill = status,\n      color = status,\n      label = paste0(format(percent, nsmall=1), '%'))) + \n  geom_col(position = position_stack(reverse = TRUE),\n           color = \"white\") +\n  geom_text(\n    position = position_stack(reverse = TRUE),\n    size = 8/.pt, \n    hjust = 1.1,\n    show.legend = FALSE) +\n  scale_fill_manual(name = NULL, values = barCols) +\n  scale_colour_manual(name = NULL, values = label_text_colors) +\n  scale_y_discrete(NULL) +\n  scale_x_continuous(NULL) +\n  labs(\n    title = 'Victorians most likely to rate their health as <span style=\"color: #1A9641;\">**Excellent**</span> or <span style=\"color: #A6D96A;\">**Very Good**</span>',\n    subtitle = 'Self-assessed health status by states and territories',\n    caption = 'Source: National Health Survey, 2022') +\n  theme(\n    plot.title.position = 'plot',\n    plot.title = element_markdown(size=14, vjust=2),\n    plot.subtitle = element_text(size=10, color = 'grey30', face = 'bold'),\n    plot.caption = element_text(size=8, color = 'grey60'),\n    panel.background = element_blank(),\n    axis.ticks.y = element_blank()\n  )\n```\n\n::: {.cell-output-display}\n![](exercise3-5_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\nThis simply legend works quite well and **if you are happy with this you can finish this exercise here!** \n\n<hr>\n\n# Add a bespoke legend\n\nThe final figure places the legend in a horizontal orientation with the legend colours matching reflecting the colours in the bars, changing from red to green as the eye scans from left to right.\n\nTo achieve this effect I turned of the default legend and built a bespoke legend using `geom_tile()` for the coloured boxes and `geom_text()` for the legend labels. \n\nThe first step to do this is to create a new dataframe which defines the `x` and `y` position of the coloured boxes that comprise the legend.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlegendDf <- data.frame(\n  y = rep(9.5, 5),\n  x = 10 + 0:4 * 20\n)\n\nlegendDf\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    y  x\n1 9.5 10\n2 9.5 30\n3 9.5 50\n4 9.5 70\n5 9.5 90\n```\n\n\n:::\n:::\n\n\nThis data frame has 2 columns and five rows. Each pair of x-y coordinates defines the center of a legend box, with the first box positioned at 10 along the x-axis and the last box positioned at 90.\n\nHere is the trickiest part of this step: because our chart is now being built using two separate data frames we need to move the calls to `data=` and `aes()` from their current position within `ggplot()` to their individuals geoms. \n\nFor example, we will move from this general structure\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(\n  data = df1Plot,\n  aes = (...)\n) + \n  geom_col() +\n  geom_text()\n```\n:::\n\n\nTo this general structure\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() + \n  geom_col(\n      data = df1Plot,\n      aes = (...)) +\n  geom_text(\n      data = df1Plot,\n      aes = (...))\n```\n:::\n\n\nWhen we do this, we only have to retain the aesthetics that are relevant for each geom. So we can drop `label =` in the `aes()` for `geom_col()` (the columns themselves have no label) and we can drop `fill =` in the `aes()` for `geom_text()` (the text itself has no fill). \n\n\n::: {.cell source-line-numbers='1-5,8-13,16-21,30-33,45'}\n\n```{.r .numberLines .cell-code  code-fold=\"true\"}\n# Data frame for legend\nlegendDf <- data.frame(\n  y = rep(9.5, 5),\n  x = 10 + 0:4 * 20\n)\n\nggplot() + \n  geom_col(\n    data = df1Plot,\n    aes(x = percent, \n        y = fct_reorder(state, totalHealthy), \n        fill = status,\n        color = status),\n    position = position_stack(reverse = TRUE),\n   color = \"white\") +\n  geom_text(\n    data = df1Plot,\n    aes(x = percent, \n        y = fct_reorder(state, totalHealthy), \n        color = status,\n        label = paste0(format(percent, nsmall=1), '%')),\n    position = position_stack(reverse = TRUE),\n    size = 8/.pt,\n    hjust = 1.1,\n    show.legend = FALSE) +\n  scale_fill_manual(name = NULL, values = barCols) +\n  scale_colour_manual(name = NULL, values = label_text_colors) +\n  scale_y_discrete(NULL) +\n  scale_x_continuous(NULL) +\n  geom_tile( # The legend box\n    data = legendDf,\n    aes(x = x, y = y),\n    color = 'white') +\n  labs(\n    title = 'Victorians most likely to rate their health as <span style=\"color: #1A9641;\">**Excellent**</span> or <span style=\"color: #A6D96A;\">**Very Good**</span>',\n    subtitle = 'Self-assessed health status by states and territories',\n    caption = 'Source: National Health Survey, 2022') +\n  theme(\n    plot.title.position = 'plot',\n    plot.title = element_markdown(size=14, vjust=2),\n    plot.subtitle = element_text(size=10, color = 'grey30', face = 'bold'),\n    plot.caption = element_text(size=8, color = 'grey60'),\n    panel.background = element_blank(),\n    axis.ticks.y = element_blank(),\n    legend.position = 'none'\n  )\n```\n\n::: {.cell-output-display}\n![](exercise3-5_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n<hr>\n\n# Add colour fill\n\nThe position looks ok. Now lets colour in the legend box. We want to use the same colour palette as the bars so we will take advantage of the existing `healthStatus` variable and append a similar variable to our legend data frame. We can then map the fill colour for `geom_tile()` to this variable. Because the fill variable name is the same factor, the existing `scale_color_manual()` ensures the colours are the same.\n\n\n::: {.cell source-line-numbers='1-2,8,36'}\n\n```{.r .numberLines .cell-code  code-fold=\"true\"}\n# Define health status levels\nhealthStatus <- c(\"Poor\", \"Fair\", \"Good\", \"Very good\", \"Excellent\")\n\n# Data frame for legend\nlegendDf <- data.frame(\n  y = rep(9.5, 5),\n  x = 10 + 0:4 * 20,\n  label = factor(healthStatus, levels = healthStatus)\n)\n\nggplot() + \n  geom_col(\n    data = df1Plot,\n    aes(x = percent, \n        y = fct_reorder(state, totalHealthy), \n        fill = status,\n        color = status),\n    position = position_stack(reverse = TRUE),\n    color = \"white\") +\n  geom_text(\n    data = df1Plot,\n    aes(x = percent, \n        y = fct_reorder(state, totalHealthy), \n        color = status,\n        label = paste0(format(percent, nsmall=1), '%')),\n    position = position_stack(reverse = TRUE),\n    size = 8/.pt,\n    hjust = 1.1,\n    show.legend = FALSE) +\n  scale_fill_manual(name = NULL, values = barCols) +\n  scale_colour_manual(name = NULL, values = label_text_colors) +\n  scale_y_discrete(NULL) +\n  scale_x_continuous(NULL) +\n  geom_tile( # The legend box\n    data = legendDf,\n    aes(x = x, y = y, fill = label),\n    color = 'white') +\n  labs(\n    title = 'Victorians most likely to rate their health as <span style=\"color: #1A9641;\">**Excellent**</span> or <span style=\"color: #A6D96A;\">**Very Good**</span>',\n    subtitle = 'Self-assessed health status by states and territories',\n    caption = 'Source: National Health Survey, 2022') +\n  theme(\n    plot.title.position = 'plot',\n    plot.title = element_markdown(size=14, vjust=2),\n    plot.subtitle = element_text(size=10, color = 'grey30', face = 'bold'),\n    plot.caption = element_text(size=8, color = 'grey60'),\n    panel.background = element_blank(),\n    axis.ticks.y = element_blank(),\n    legend.position = 'none'\n  )\n```\n\n::: {.cell-output-display}\n![](exercise3-5_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n<hr>\n\n# Add legend text labels\n\nWe can use the same legend dataframe to impose text labels on top of the legend boxes. As with the column labels, we can do this with `geom_text()`. \n\n\n::: {.cell source-line-numbers='28-30'}\n\n```{.r .numberLines .cell-code  code-fold=\"true\"}\nggplot() + \n  geom_col(\n    data = df1Plot,\n    aes(x = percent, \n        y = fct_reorder(state, totalHealthy), \n        fill = status,\n        color = status),\n    position = position_stack(reverse = TRUE),\n    color = \"white\") +\n  geom_text(\n    data = df1Plot,\n    aes(x = percent, \n        y = fct_reorder(state, totalHealthy), \n        color = status,\n        label = paste0(format(percent, nsmall=1), '%')),\n    position = position_stack(reverse = TRUE),\n    size = 8/.pt,\n    hjust = 1.1,\n    show.legend = FALSE) +\n  scale_fill_manual(name = NULL, values = barCols) +\n  scale_colour_manual(name = NULL, values = label_text_colors) +\n  scale_y_discrete(NULL) +\n  scale_x_continuous(NULL) +\n  geom_tile( # The legend box\n    data = legendDf,\n    aes(x = x, y = y, fill = label),\n    color = 'white') +\n  geom_text( # The legend box\n    data = legendDf,\n    aes(x = x, y = y, label = label)) +\n  labs(\n    title = 'Victorians most likely to rate their health as <span style=\"color: #1A9641;\">**Excellent**</span> or <span style=\"color: #A6D96A;\">**Very Good**</span>',\n    subtitle = 'Self-assessed health status by states and territories',\n    caption = 'Source: National Health Survey, 2022') +\n  theme(\n    plot.title.position = 'plot',\n    plot.title = element_markdown(size=14, vjust=2),\n    plot.subtitle = element_text(size=10, color = 'grey30', face = 'bold'),\n    plot.caption = element_text(size=8, color = 'grey60'),\n    panel.background = element_blank(),\n    axis.ticks.y = element_blank(),\n    legend.position = 'none'\n  )\n```\n\n::: {.cell-output-display}\n![](exercise3-5_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n<hr>\n\n# Colour the legend text labels\n\nWe can apply a nice contrasting colour for the text labels by using the text colour palette we defined previously. We just need to map colour to the label variable i.e. `aes(color = label)`. Again, because we are using the same factor variable, our previously defined `scale_colour_manual()` will do the rest. \n\n\n::: {.cell source-line-numbers='31'}\n\n```{.r .numberLines .cell-code  code-fold=\"true\"}\n# Colour the legend text\nggplot() + \n  geom_col(\n    data = df1Plot,\n    aes(x = percent, \n        y = fct_reorder(state, totalHealthy), \n        fill = status,\n        color = status),\n    position = position_stack(reverse = TRUE),\n    color = \"white\") +\n  geom_text(\n    data = df1Plot,\n    aes(x = percent, \n        y = fct_reorder(state, totalHealthy), \n        color = status,\n        label = paste0(format(percent, nsmall=1), '%')),\n    position = position_stack(reverse = TRUE),\n    size = 8/.pt,\n    hjust = 1.1,\n    show.legend = FALSE) +\n  scale_fill_manual(name = NULL, values = barCols) +\n  scale_colour_manual(name = NULL, values = label_text_colors) +\n  scale_y_discrete(NULL) +\n  scale_x_continuous(NULL) +\n  geom_tile( # The legend box\n    data = legendDf,\n    aes(x = x, y = y, fill = label),\n    color = 'white') +\n  geom_text( # The legend box\n    data = legendDf,\n    aes(x = x, y = y, label = label, color = label)) +\n  labs(\n    title = 'Victorians most likely to rate their health as <span style=\"color: #1A9641;\">**Excellent**</span> or <span style=\"color: #A6D96A;\">**Very Good**</span>',\n    subtitle = 'Self-assessed health status by states and territories',\n    caption = 'Source: National Health Survey, 2022') +\n  theme(\n    plot.title.position = 'plot',\n    plot.title = element_markdown(size=14, vjust=2),\n    plot.subtitle = element_text(size=10, color = 'grey30', face = 'bold'),\n    plot.caption = element_text(size=8, color = 'grey60'),\n    panel.background = element_blank(),\n    axis.ticks.y = element_blank(),\n    legend.position = 'none'\n  )\n```\n\n::: {.cell-output-display}\n![](exercise3-5_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n<hr>\n\n# Add in the legend text colour for Poor\n\nThis looks okay, but one issue is that there is no label text color for the category **Poor**, which we previously set to transparent.\n\nTo fix this we need to define a second version of the text label color palette which includes a colour for **Poor**. As before, we can use the `lighten()` function to specify a nicely contrasting colour, here 60% lighter than the original red. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Custom colors for legend text (includes red)\nlabel_text_colors2 <- c(lighten(barCols[1], 0.6),\n                        darken(barCols[2], 0.4),\n                        darken(barCols[3], 0.4),\n                        darken(barCols[4], 0.4),\n                        lighten(barCols[5], 0.6))\n\nlabel_text_colors2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"#FFACAD\" \"#9C6001\" \"#939303\" \"#568003\" \"#7CE190\"\n```\n\n\n:::\n:::\n\n\nIn base `ggplot2`, we can only map the colour aesthetic to a single set of colours. Put another way, we can only define `scale_colour_manual()` once. Luckily, we can get around this using the `ggnewscale` package, which allows you to add multiple colour and fill scales. To add a second colour scale w need to include `new_scale_color()` in our code before we specify our second `scale_colour_manual()` to define the legend text label colours. \n\n\n::: {.cell source-line-numbers='1-6,8-9,38,41'}\n\n```{.r .numberLines .cell-code  code-fold=\"true\"}\n# Custom colors for legend text (includes red)\nlabel_text_colors2 <- c(lighten(barCols[1], 0.6),\n                        darken(barCols[2], 0.4),\n                        darken(barCols[3], 0.4),\n                        darken(barCols[4], 0.4),\n                        lighten(barCols[5], 0.6))\n\n# Library to allow second colour mapping\nlibrary(ggnewscale)\n\nggplot() + \n  geom_col(\n    data = df1Plot,\n    aes(x = percent, \n        y = fct_reorder(state, totalHealthy), \n        fill = status,\n        color = status),\n    position = position_stack(reverse = TRUE),\n    color = \"white\") +\n  geom_text(\n    data = df1Plot,\n    aes(x = percent, \n        y = fct_reorder(state, totalHealthy), \n        color = status,\n        label = paste0(format(percent, nsmall=1), '%')),\n    position = position_stack(reverse = TRUE),\n    size = 8/.pt,\n    hjust = 1.1,\n    show.legend = FALSE) +\n  scale_fill_manual(name = NULL, values = barCols) +\n  scale_colour_manual(name = NULL, values = label_text_colors) +\n  scale_y_discrete(NULL) +\n  scale_x_continuous(NULL) +\n  geom_tile( # The legend box\n    data = legendDf,\n    aes(x = x, y = y, fill = label),\n    color = 'white') +\n  new_scale_colour() +\n  geom_text( # The legend box\n    data = legendDf,\n    aes(x = x, y = y, label = label, color = label)) +\n  scale_colour_manual(name = NULL, values = label_text_colors2) +\n  labs(\n    title = 'Victorians most likely to rate their health as <span style=\"color: #1A9641;\">**Excellent**</span> or <span style=\"color: #A6D96A;\">**Very Good**</span>',\n    subtitle = 'Self-assessed health status by states and territories',\n    caption = 'Source: National Health Survey, 2022') +\n  theme(\n    plot.title.position = 'plot',\n    plot.title = element_markdown(size=14, vjust=2),\n    plot.subtitle = element_text(size=10, color = 'grey30', face = 'bold'),\n    plot.caption = element_text(size=8, color = 'grey60'),\n    panel.background = element_blank(),\n    axis.ticks.y = element_blank(),\n    legend.position = 'none'\n  )\n```\n\n::: {.cell-output-display}\n![](exercise3-5_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n<hr>\n\n# Tidy up the legend\n\nThis looks great! As a final step we can make this a bit neater by reducing the height of the legend box and using a smaller font for the legend text labels. \n\n\n::: {.cell source-line-numbers='27,32'}\n\n```{.r .numberLines .cell-code  code-fold=\"true\"}\nggplot() + \n  geom_col(\n    data = df1Plot,\n    aes(x = percent, \n        y = fct_reorder(state, totalHealthy), \n        fill = status,\n        color = status),\n    position = position_stack(reverse = TRUE),\n    color = \"white\") +\n  geom_text(\n    data = df1Plot,\n    aes(x = percent, \n        y = fct_reorder(state, totalHealthy), \n        color = status,\n        label = paste0(format(percent, nsmall=1), '%')),\n    position = position_stack(reverse = TRUE),\n    size = 8/.pt,\n    hjust = 1.1,\n    show.legend = FALSE) +\n  scale_fill_manual(name = NULL, values = barCols) +\n  scale_colour_manual(name = NULL, values = label_text_colors) +\n  scale_y_discrete(NULL) +\n  scale_x_continuous(NULL) +\n  geom_tile( # The legend box\n    data = legendDf,\n    aes(x = x, y = y, fill = label),\n    color = 'white', height = 0.65) +\n  new_scale_colour() +\n  geom_text( # The legend box\n    data = legendDf,\n    aes(x = x, y = y, label = label, color=label),\n    size = 8/.pt) +\n  scale_colour_manual(name = NULL, values = label_text_colors2) +\n  labs(\n    title = 'Victorians most likely to rate their health as <span style=\"color: #1A9641;\">**Excellent**</span> or <span style=\"color: #A6D96A;\">**Very Good**</span>',\n    subtitle = 'Self-assessed health status by states and territories',\n    caption = 'Source: National Health Survey, 2022') +\n  theme(\n    plot.title.position = 'plot',\n    plot.title = element_markdown(size=14, vjust=2),\n    plot.subtitle = element_text(size=10, color = 'grey30', face = 'bold'),\n    plot.caption = element_text(size=8, color = 'grey60'),\n    panel.background = element_blank(),\n    axis.ticks.y = element_blank(),\n    legend.position = 'none'\n  )\n```\n\n::: {.cell-output-display}\n![](exercise3-5_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n\n<hr>\n\n::: {style=\"margin: 0 auto;\"}\n\nIf you made it this far---you are amazing!! \n\n<iframe src=\"https://giphy.com/embed/12P29BwtrvsbbW\" width=\"480\" height=\"365\" style=\"\" frameBorder=\"0\" class=\"giphy-embed\" allowFullScreen></iframe><p><a href=\"https://giphy.com/gifs/reaction-applause-clapping-12P29BwtrvsbbW\">via GIPHY</a></p>\n\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}