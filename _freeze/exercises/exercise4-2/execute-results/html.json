{
  "hash": "4a529d738090789d52e463a5cc19626a",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Step-by-step guide\"\nformat: \n  html:\n    execute:\n      echo: false\n      warning: false\n      results: hide\nnumber-sections: true      \n---\n\n::: {.cell}\n\n:::\n\n\n\n\n![The goal for Exercise 4](../images/chronic-conditions-2001-2022.png){#fig-chart2}\n\n# Set up your code file meta data\n\nAs before, start by setting up your code file meta information.\n\n1. In RStudio, open the file `exercsies/1-code/4-plot-chronic-conditions.R`\n2. Update the details in the title box. \n\n<hr>\n\n# Load libraries\n\nRemember to load all your libraries in one place at the top of the script all the libraries you need in a script in one place at the top of the file. \n\nStart with the usual suspects: `dplyr` and `ggplot2`. You can add more as you go. \n\n<hr>\n\n# Load your data\n\nThe data might already be loaded into your R environment, but we should make this step an explicit part of the code. \n\nUse the `load()` function to load the second clean dataset from `exercises/3-clean-data`. If you didn't get to the end of the data cleaning exercise you can load the data from `solutions/3-clean-data` instead. \n\n<hr>\n\n# Start with a base plot \n\n\n::: {.cell}\n::: {.cell-output-display}\n![](exercise4-2_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n:::\n\n\nAs a starting point, aim to create this line chart using `geom_line()`. You should be able to identify the `x` and `y` aesthetics from the axis labels above. You will also need to define the `group` aesthetic to make sure the line for each condition is plotted separately. \n\n\n<hr>\n\n# Add points\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](exercise4-2_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\nAdd points on top of the lines using `geom_point()`\n\n\n<hr>\n  \n# Add colours\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](exercise4-2_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n::: {.aside}\n\nRemember that `aes(color=, fill=)` refers to different things: **color** refers to the outline colour of a shape, while **fill** refers to the inside colour of the shape. Some shapes, like the lines and solid points here, only have a color property and fill can't be defined.\n\n:::\n\nCan you add highlight colours for the two upward trending conditions?\n\nTo do this:\n\n1. Use `case_when()` to add a new variable to the dataset that codes Mental health as **a**, Allergies as **b** and everything else as **c**. Enter `?case_when()` at the console if you are having trouble remembering the syntax. \n2. Map this new variable to color in `aes()`.\n3. Define your color scale in `scale_color_manual()`\n\n::: aside\n@hint-colours\n:::\n\n::: {style=\"display: none;\"}\n::: {#hint-colours}\n\nFeel free to define whatever palette you like! Here I have used the colours <span style=\"color: #BC2C1A; font-weight: 600;\">#BC2C1A</span> for the Mental health line and <span style=\"color: #377771; font-weight: 600;\">#377771</span> for the Allergies line. The other lines are coloured in grey. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define colours\nhighlightPalette = c('#BC2C1A', '#377771', 'grey60')\n```\n:::\n\n\n:::\n:::\n\n<hr>\n\n# Add fill colour for the points\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](exercise4-2_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\nAdd fill colour to the points by mapping fill to the same variable as colour in `aes`. You can then define the fill colours in `scale_fill_manual()`\n\n::: aside\n@hint-fill\n:::\n\n::: {style=\"display: none;\"}\n::: {#hint-fill}\n\nThe default shape for `geom_point()` is a solid circle---because it is solid we can't define the fill aesthetic. To change this we can specify `shape = 21` which is the code for a circle with a fill. See [here](http://www.sthda.com/english/wiki/r-plot-pch-symbols-the-different-point-shapes-available-in-r#google_vignette) for a list of all the available shapes in R. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Set shape to hollow circles\ngeom_point(shape = 21)\n```\n:::\n\n\nWe can use the `lighten()` function from the `colorspace` package to specify a fill colour that is 50% lighter than the color palette. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Use the lighten() function\nscale_fill_manual(values = lighten(highlightPalette, 0.5))\n```\n:::\n\n\n:::\n:::\n\n<hr>\n\n# Remove the legend\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](exercise4-2_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\nThe legend isn't much use so we can turn it off here. Use the same approach as the previous exercise, setting `legend.position = \"none\"` in your `theme()`.\n\n\n<hr>\n\n# Remove the axis titles\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](exercise4-2_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\nOne way to do this is to add the `scale_*` functions setting `name = NULL`. \n\n::: aside\n@hint-scale-date\n:::\n\n::: {style=\"display: none;\"}\n::: {#hint-scale-date}\n\nBecause `date` is a date variable, the appropriate scale is `scale_x_date()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nscale_x_date(name = NULL)\n```\n:::\n\n\n\n:::\n:::\n\n<hr>\n\n# Adjust the ranges on the x-axis and y-axis\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](exercise4-2_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\nGive the plot some breathing room by expanding the range of the x and y axes. You can do this by setting `limits = c(min, max)` in `scale_x_date()` and `scale_y_continuous()`. Set the x axis to run from 2000 to 2023 and set the y axis to run from 0 to 30. \n\n::: aside\n@hint-scale-break\n:::\n\n::: {style=\"display: none;\"}\n::: {#hint-scale-break}\n\nThe x-axis is a date variable so we need to specify the max and min of the range as a date. We can do this using the `as.Date()` function, which converts strings representations of dates to Date objects. For example, the date January 1 2000 would be `as.Date('2000-01-01')`. We can also set the `date_labels` and `breaks` arguments.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nscale_x_date(NULL, \n               limits = c(as.Date('2000-01-01'),\n                          as.Date('2023-01-01')),\n               date_labels = '%Y',\n               breaks = as.Date(c('2000-01-01',\n                                  '2005-01-01',\n                                  '2010-01-01',\n                                  '2015-01-01',\n                                  '2020-01-01',\n                                  '2023-01-01')))\n```\n:::\n\n\n\n:::\n:::\n\n<hr>\n\n# Add title, subtitle, and caption\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](exercise4-2_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\nDo this using the `labs()` function, as in Exercise 3.\n\n<hr>\n\n# Add text labels\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](exercise4-2_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\nAdd text labels using using `geom_text()`, setting the `y` aesthetic to percent and the `x` aesthetic to **2023-01-01**. \n\n::: aside\n@hint-text-label\n:::\n\n::: {style=\"display: none;\"}\n::: {#hint-text-label}\n\nWe only want the label for the last data point---to achieve this we can group the dataset by condition and then subset to the last observation within each condition using `slice_tail()`. This can be done on the fly within `geom_text()`, as below. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n  geom_text(\n    data = df2Plot |> \n      group_by(condition) |> \n      slice_tail(n=1),\n    aes(\n      x = as.Date('2023-01-01'),\n      y = percent,\n      label = condition))\n```\n:::\n\n\n:::\n:::\n\n\n<hr>\n\n# Shift text labels to the right and make them smaller\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](exercise4-2_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\nTry setting the `size` and `hjust` arguments in `geom_text()` to shift the labels to the right and shrink them a bit. \n\n::: aside\n@hint-unclip\n:::\n\n::: {style=\"display: none;\"}\n::: {#hint-unclip}\n\nYou probably find that the text labels disappear outside of the plot area. There are two tricks to addressing this. First we have to increase the plot margin on the right-hand side of the plot by setting `plot.margin` in our `theme()`. This gives some space for the labels to appear. Second we have to include the line `coord_cartesian(clip = 'off')` in our ggplot code. This allows plot elements to appear outside the plot panel, in the margin space that we have created.\n\nYour updated code should include\n\n\n::: {.cell}\n\n```{.r .cell-code}\n  coord_cartesian(clip = 'off') +\n  theme(\n    ... # other theme settings\n    plot.margin = margin(t=10, b=10, r=80, l=10),\n  )\n```\n:::\n\n\n:::\n:::\n\n<hr>\n\n# Remove the grey background\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](exercise4-2_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\nLet's get rid of the default grey background. We can do this by editing the panel background. \n\n::: aside\n@hint-panel-background\n:::\n\n::: {style=\"display: none;\"}\n::: {#hint-panel-background}\n\nTry setting `panel.background = element_blank()` in your `theme()`\n\n:::\n:::\n\n<hr>\n\n# Add in major grid lines\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](exercise4-2_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\nWe can add in major grid lines by setting `panel.grid.major` in your `theme`\n\n::: aside\n@hint-panel-grid\n:::\n\n::: {style=\"display: none;\"}\n::: {#hint-panel-grid}\n\nTry setting `panel.grid.major = element_line(color = 'grey90')` in your `theme()`\n\n:::\n:::\n\n<hr>\n\n# Remove axis ticks\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](exercise4-2_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\nYou can get rid of the axis ticks by setting `axis.ticks()` in the `theme()`.\n\n<hr>\n\n# Increase the line size for the highlighted lines\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](exercise4-2_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n\n\nAs well as emphasising the key lines for Mental health and Allergies using colour, we can add extra emphasise by increasing the line size relative to the other conditions. To do this we need to set a new aesthetic `linewidth` which we can then control by setting `scale_linewidth_manual()`. \n\n::: aside\n@hint-linewidth\n:::\n\n::: {style=\"display: none;\"}\n::: {#hint-linewidth}\n\nYour `aes()` should look something like this\n\n\n::: {.cell}\n\n```{.r .cell-code}\naes(\n  y = percent,\n  x = date,\n  group = condition,\n  color = highlight,\n  fill = highlight,\n  linewidth = highlight)\n```\n:::\n\n\nThen add `scale_linewidth_manual(values = c(1.5, 1.5, 0.5))`. The first two numbers are for **Mental health** and **Allergies**, the last number is for the other lines. Play with different numbers to get line widths that you like. \n\n:::\n:::\n\n<hr>\n\n# Emphasise the key words in the title\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](exercise4-2_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n\nFollow the example in Exercise 3 to emphasise the key words in the title. \n\n::: aside\n@hint-ggtext\n:::\n\n::: {style=\"display: none;\"}\n::: {#hint-ggtext}\n\nRemember to load the `ggtext` library and set `plot.title = element_markdown()` in the `theme()`. \n\n:::\n:::\n\n<hr>\n\n\n# Add text hierarchy in the title, subtitle and caption\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](exercise4-2_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n:::\n\n\nEdit the `plot.title`, `plot.subtitle`, and `plot.caption` arguments in `theme()` to achieve this. \n\n::: aside\n@hint-text-hierarchy\n:::\n\n::: {style=\"display: none;\"}\n::: {#hint-text-hierarchy}\n\nFor example, including `plot.subtitle = element_text(size=10, color = 'grey60', face = 'bold')` will alter the colour, font size and font face for the subtitle.\n\n:::\n:::\n\n<hr>\n\n# Add percentage symbol to y-axis label\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](exercise4-2_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n:::\n\n\nThis is a nice subtle way to communicate the meaning of the y-axis without using up too much space or ink. To achieve this you need to edit `scale_y_continuous()`. \n\n::: aside\n@hint-percent\n:::\n\n::: {style=\"display: none;\"}\n::: {#hint-percent}\n\nUse the `labels` argument in `scale_y_continuous()` to define the axis text labels. You must supply as many labels as there are major breaks in the scale (corresponding to the major gridlines). \n\n\n::: {.cell}\n\n```{.r .cell-code}\nscale_y_continuous(name = NULL, \n                   limits = c(0, 30), \n                   labels = c('0', '10', '20', '30%'))\n```\n:::\n\n\n:::\n:::\n\n<hr>\n\n# Tidy up condition labels\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](exercise4-2_files/figure-html/unnamed-chunk-27-1.png){width=672}\n:::\n:::\n\n\nThe labels for the conditions are a bit messy. We can take a few steps to tidy these up:\n\n1. Drop some of the overlapping conditions in the dataframe that gets passed to `geom_text()` \n1. All the percentage for the final data point for our two highlighted conditions. \n\nStep 1 can be achieved by adding a `filter()` in the code that defines the text label data. Step 2 can be achieved by defining a new variable in the underlying chart dataset. This new variable can should combine the condition and the percent for the highlight lines and just the condition for the other lines. \n\n::: aside\n@hint-text-labels\n:::\n\n::: {style=\"display: none;\"}\n::: {#hint-text-labels}\n\nOne way to drop overlapping labels is to filter them out on the fly in the code that defines the defines the text label data. The code below combines `!` and `%in%` to say filter to conditions that are **not** in the vector.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngeom_text(\n  data = df2Plot |> \n    group_by(condition) |> \n    slice_tail(n=1) |> \n    filter(! condition %in% c(\"Heart, stroke & vascular\", \"COPD\")),\n  aes(...)\n```\n:::\n\n\nCreate a new variable to add the percent for the final data point:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf2Plot <- df2Clean |>\n  mutate(\n    highlight = case_when(\n      condition==\"Mental health\" ~ 'a',\n      condition==\"Allergies\" ~ 'b',\n      .default = 'c'),\n    label2 = ifelse(\n      highlight==\"c\", condition, \n      paste0(condition, \" (\", percent, \"%)\")\n    ))\n```\n:::\n\n\nTo help see what this code is doing, try entering `paste0(\"COPD\", \" (\", \"20.4%\", \"%)\")` at the console. \n\n:::\n:::\n\n<hr>\n\n::: {style=\"margin: 0 auto;\"}\n\nYou are a certified all star!!\n\n<iframe src=\"https://giphy.com/embed/eUKYlbxwIRnqkjvXcK\" width=\"381\" height=\"480\" style=\"\" frameBorder=\"0\" class=\"giphy-embed\" allowFullScreen></iframe><p><a href=\"https://giphy.com/gifs/cool-glasses-so-eUKYlbxwIRnqkjvXcK\">via GIPHY</a></p>\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}