{
  "hash": "8718bf5192e12b6d7702e1195a716abd",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Part 1. The base plot\"\nformat: \n  html:\n    execute:\n      echo: true\n      warning: false\n      results: hide\nnumber-sections: true      \n---\n\n\n![The goal for Exercise 3](../images/self-assessed-health.png){#fig-chart1}\n\n# Set up your code file meta data\n\nAs before, start by setting up your code file meta information.\n\n1. In RStudio, open the file `exercsies/1-code/3-plot-self-assessed-health.R`\n2. Update the details in the title box. \n\n<hr>\n\n# Load libraries\n\nRemember to load all your libraries in one place at the top of the script all the libraries you need in a script in one place at the top of the file. \n\nStart with the libraries below. We'll need to load more libraries as we go so remember to add them to this section of code.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Load libraries\nlibrary(dplyr) \nlibrary(ggplot2)\n```\n:::\n\n\n\n# Load your data\n\nThe data might already be loaded into your R environment, but we should make this step an explicit part of the code.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load cleaned data\nload('exercises/3-clean-data/vis1.Rda')\n```\n:::\n\n\n<hr>\n\n# Start plotting \n\nLooking back at @fig-chart1, we can quickly surmise the main aesthetic mappings in the chart:\n\n* `x` is mapped to **percent**\n* `y` is mapped to **state**\n* `fill` is mapped to **status**\n\nThis is all we need to get a passable plot!\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\nggplot(\n  data=df1Clean,\n  aes(x = percent, y = state, fill=status)) + \n  geom_col()\n```\n\n::: {.cell-output-display}\n![](exercise3-2_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\nThis is a good start for just a few lines of code, but there are a lot of things to fix!\n\n<hr>\n\n# Order the states from most healthy to least healthy\n\nThe final plot orders the states on the y-axis from most healthy to least healthy. In order to sort the states in this way, we need to create a new variable equal to the sum of the proportions in the categories **Excellent** and **Very good**. We can do this using some `dplyr` code.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create variable indicating % very good or excellent health\ndf1Plot <- df1Clean |>\n  group_by(state) |>\n  slice(4:5) |>\n  summarise(totalHealthy = sum(percent)) |>\n  left_join(df1Clean, by = 'state')\n```\n:::\n\n\nThis basically creates the following summary table, and then merges it back to the original dataset, assigning the result to a new dataframe **df1Plot**.\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 8 √ó 2\n  state                        totalHealthy\n  <fct>                               <dbl>\n1 Australian Capital Territory         61.1\n2 New South Wales                      56.6\n3 Northern Territory                   55.5\n4 Queensland                           55.5\n5 South Australia                      55.9\n6 Tasmania                             53.1\n7 Victoria                             61.5\n8 Western Australia                    56.6\n```\n\n\n:::\n:::\n\n\nNow that we have the right variable to sort on, we can use the `fct_reorder()` function from the `forcats` package to sort the states directly in the ggplot code. Don't forget to add `library(forcats)` to your list of loaded libraries at the top of your script!\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\nlibrary(forcats)\n\nggplot(\n  data=df1Plot,\n  aes(x = percent, \n      y = fct_reorder(state, totalHealthy), \n  fill=status)) + \n  geom_col()\n```\n\n::: {.cell-output-display}\n![](exercise3-2_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n<hr>\n\n# Reverse the order of the health-assessment categories\n\nNotice that the health categories are currently ordered from **Excellent** to **Poor**. we'd like to reverse this so that **Poor** is on the left and **Excellent** is on the right. We can do this by setting `reverse=TRUE` in the `position_stack()` argument in `geom_col()`.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\nggplot(\n  data=df1Plot,\n  aes(x = percent, \n      y = fct_reorder(state, totalHealthy), \n      fill=status)) + \n  geom_col(position = position_stack(reverse = TRUE))\n```\n\n::: {.cell-output-display}\n![](exercise3-2_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n<hr>\n\n\n# Customise the colour scheme\n\nWe've done a lot already! Next we will really improve the plot by updating the colour scheme. The default coloring is categorical and the colours don't carry any meaning. The target plot uses a familiar traffic light colour scheme that also carries meaning (red generally has negative connotations and green generally has positive connotations, in the Anglosphere at least). \n\n::: {.aside}\n\nThe psychological and cultural associations of colors varies across place and time. In 1700s Europe men wore <span style=\"color: pink; font-weight: 600;\">pink</span> as a sign of their wealth and power; today it is almost exclusively a colour associate with girls, so much so that Mattel---the Corporation behind Barbie---have trademark rights to Barbie Pink (<span style=\"color: #DA1884; font-weight: 600;\">Pantone 219C</span>).<br><br>Here we use <span style=\"color: #1A9641; font-weight: 600;\">green</span> to connote a positive outcome but green is also associated with jealousy (\"green with envy\"), sickness ü§¢, and inexperience (\"a greenhorn\"). Meanwhile <span style=\"color: #D7191C; font-weight: 600;\">red</span> is the colour of danger, but also of love ‚ù§Ô∏è and (in China) an auspicious colour associated with prosperity üßß.\n\n:::\n\nWhile we could define our colours manually, the `RColorBrewer` package provides several [colour palettes for R](https://r-graph-gallery.com/38-rcolorbrewers-palettes.html). We will use the brewer.pal() function to access the diverging red-yellow-green (RdYlGn) palette below. Here are the colour hex codes:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Add the library call to the top of your script!\nlibrary(RColorBrewer)\n\nbrewer.pal(name='RdYlGn', n=5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"#D7191C\" \"#FDAE61\" \"#FFFFBF\" \"#A6D96A\" \"#1A9641\"\n```\n\n\n:::\n:::\n\n\nWe can use the function `display.brewer.pal` to see the actual colours.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndisplay.brewer.pal(name='RdYlGn', n=5)\n```\n\n::: {.cell-output-display}\n![](exercise3-2_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\nFinally, make sure to save the five colours in an R vector as below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Custom bar colours\nbarCols <- RColorBrewer::brewer.pal(5, 'RdYlGn')\n```\n:::\n\n\nNow that we have our five colours stored as a vector we can map these to the health categories using `scale_fill_manual()`. The legend name doesn't add much here so we can remove it entirely by setting `name = NULL`. \n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n# Customise colours\nggplot(\n  data=df1Plot,\n  aes(x = percent, \n      y = fct_reorder(state, totalHealthy), \n      fill=status)) + \n  geom_col(position = position_stack(reverse = TRUE)) +\n  scale_fill_manual(name = NULL,\n                    values = barCols)\n```\n\n::: {.cell-output-display}\n![](exercise3-2_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\nAmazing!!\n\n<hr>\n\n\n# Get rid of the axis labels\n\nLooking back at @fig-chart1, notice that the axis labels are deleted entirely. I think that is safe here because the states and territories are obvious, and when we add titles it will be clear that the numbers are percentages. \n\nA simple way to do this is with the `labs()` function, but here I will use `scale_x_` and `scale_y_` functions. This is from habit---often we need to customise aspects of the axes that can only be controlled via the `scale_*` functions.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nggplot(\n  data=df1Plot,\n  aes(x = percent, \n      y = fct_reorder(state, totalHealthy), \n      fill=status)) + \n  geom_col(position = position_stack(reverse = TRUE)) +\n  scale_fill_manual(name = NULL,\n                    values = barCols) +\n  scale_y_discrete(NULL) +\n  scale_x_continuous(NULL)\n```\n\n::: {.cell-output-display}\n![](exercise3-2_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n# Add a title, subtitle and caption\n\nAdd a title, subtitle and caption using the `labs()` function. The final figure colours in some of the words but we will come to that later.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nggplot(\n  data=df1Plot,\n  aes(x = percent, \n      y = fct_reorder(state, totalHealthy), \n      fill=status)) + \n  geom_col(position = position_stack(reverse = TRUE)) +\n  scale_fill_manual(name = NULL,\n                    values = barCols) +\n  scale_y_discrete(NULL) +\n  scale_x_continuous(NULL) +\n  labs(\n    title = 'Victorians most likely to rate their health as Excellent or Very Good',\n    subtitle = 'Self-assessed health status by states and territories',\n    caption = 'Source: National Health Survey, 2022')\n```\n\n::: {.cell-output-display}\n![](exercise3-2_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n<hr>\n\n# Shift the titles to the right\n\nNotice that the titles are aligned with the panel area by default, but these can often look better if they are shifted over to the right of the plot. That is easy to do by setting the `plot.title.position = 'plot'` argument in the `theme()` function.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n# Shift the titles to the right and remove the grey background box\nggplot(\n  data=df1Plot,\n  aes(x = percent, \n      y = fct_reorder(state, totalHealthy), \n      fill=status)) + \n  geom_col(position = position_stack(reverse = TRUE)) +\n  scale_fill_manual(name = NULL,\n                    values = barCols) +\n  scale_y_discrete(NULL) +\n  scale_x_continuous(NULL) +\n  labs(\n    title = 'Victorians most likely to rate their health as Excellent or Very Good',\n    subtitle = 'Self-assessed health status by states and territories',\n    caption = 'Source: National Health Survey, 2022') +\n  theme(\n    plot.title.position = 'plot'\n  )\n```\n\n::: {.cell-output-display}\n![](exercise3-2_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n<hr>\n\n# Remove the default grey panel background\n\nTo remove the grey panel background, add the option `panel.background = element_blank()` to the theme function.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n# Remove the grey background\nggplot(\n  data=df1Plot,\n  aes(x = percent, \n      y = fct_reorder(state, totalHealthy), \n      fill=status)) + \n  geom_col(position = position_stack(reverse = TRUE)) +\n  scale_fill_manual(name = NULL,\n                    values = barCols) +\n  scale_y_discrete(NULL) +\n  scale_x_continuous(NULL) +\n  labs(\n    title = 'Victorians most likely to rate their health as Excellent or Very Good',\n    subtitle = 'Self-assessed health status by states and territories',\n    caption = 'Source: National Health Survey, 2022') +\n  theme(\n    plot.title.position = 'plot',\n    panel.background = element_blank()\n  )\n```\n\n::: {.cell-output-display}\n![](exercise3-2_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n<hr>\n\n# Remove the y-axis ticks\n\nHaving removed the panel background we are left with unsightly y-axis ticks. We can pluck these out like unwanted nostril hairs by including the argument `axis.ticks.y = element_blank()` in the `theme()` function.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nggplot(\n  data=df1Plot,\n  aes(x = percent, \n      y = fct_reorder(state, totalHealthy), \n      fill=status)) + \n  geom_col(position = position_stack(reverse = TRUE)) +\n  scale_fill_manual(name = NULL,\n                    values = barCols) +\n  scale_y_discrete(NULL) +\n  scale_x_continuous(NULL) +\n  labs(\n    title = 'Victorians most likely to rate their health as Excellent or Very Good',\n    subtitle = 'Self-assessed health status by states and territories',\n    caption = 'Source: National Health Survey, 2022') +\n  theme(\n    plot.title.position = 'plot',\n    panel.background = element_blank(),\n    axis.ticks.y = element_blank()\n  )\n```\n\n::: {.cell-output-display}\n![](exercise3-2_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\nMuch better!\n\n\n# Add white spacing betweeen the colours \n\nLooking back at @fig-chart1, notice that there is thin white line between the colours of the health status categories. The effect is subtle but pleasing. We can control this by setting `colour = \"white\"` in our call to `geom_col()`.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n# White spacing between colours\nggplot(\n  data=df1Plot,\n  aes(x = percent, \n      y = fct_reorder(state, totalHealthy), \n      fill=status)) + \n  geom_col(position = position_stack(reverse = TRUE),\n           color = \"white\") +\n  scale_fill_manual(name = NULL,\n                    values = barCols) +\n  scale_y_discrete(NULL) +\n  scale_x_continuous(NULL) +\n  labs(\n    title = 'Victorians most likely to rate their health as Excellent or Very Good',\n    subtitle = 'Self-assessed health status by states and territories',\n    caption = 'Source: National Health Survey, 2022') +\n  theme(\n    plot.title.position = 'plot',\n    panel.background = element_blank(),\n    axis.ticks.y = element_blank()\n  )\n```\n\n::: {.cell-output-display}\n![](exercise3-2_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\nThis is looking pretty good! If it was Friday evening you could probably call it a day and leave it at that. But if you're still full of vim, let's see if we can text labels to our chart. \n\n\n::: {.cell}\n::: {.cell-output-display}\n![](exercise3-2_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}