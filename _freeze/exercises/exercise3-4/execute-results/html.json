{
  "hash": "fce10547cd432ee39dc4a2cb371e3c71",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Part 3. Adding highlight colours in the title\"\nformat: \n  html:\n    execute:\n      echo: true\n      warning: false\n      results: hide\nnumber-sections: true   \nfilters:\n  - line-highlight\n---\n\n::: {.cell}\n\n:::\n\n\n# Overview\n\nIn this section we will use techniques of data storytelling to help communicate the main message from the chart. First, we will highlight the key words <span style=\"color: #1A9641; font-weight: 600;\">Excellent</span> and <span style=\"color: #A6D96A; font-weight: 600;\">Good</span> in the title, using a bold font to help them stand out and corresponding colours to help match the key words to the chart. We will also use text hierarchy to adjust the font size and weight of the subtitle relative to the title, more clearly distinguishing the different types of information for the viewer. \n\n# Bold font for key words in the title\n\nNormally, we would use theme elements like `element_text()` to format titles, axis labels, and captions. However, these functions target the whole text string that comprises the title, axis label etc. In order to target specific words within the title we will use the theme element `element_markdown()` from the `ggtext` package. \n\nTo make this work we work we need to specify `plot.title = element_text()` in our call to `theme()`. Having done this, we can now use simple Markdown and HTML in our title; for example to make a word bold we can use the Markdown convention of wrapping it in two asterisks like \\*\\***this**\\*\\*. \n\n\n\n::: {.cell source-line-numbers='23,28'}\n\n```{.r .numberLines .cell-code  code-fold=\"true\"}\n# Add this to your loaded libraries\nlibrary(ggtext)\n\n# Bold font in title\nggplot(\n  data=df1Plot,\n  aes(x = percent, \n      y = fct_reorder(state, totalHealthy), \n      fill = status,\n      color = status,\n      label = paste0(format(percent, nsmall=1), '%'))) + \n  geom_col(position = position_stack(reverse = TRUE),\n           color = \"white\") +\n  geom_text(\n    position = position_stack(reverse = TRUE),\n    size = 8/.pt, \n    hjust = 1.1) +\n  scale_fill_manual(name = NULL, values = barCols) +\n  scale_colour_manual(name = NULL, values = label_text_colors) +\n  scale_y_discrete(NULL) +\n  scale_x_continuous(NULL) +\n  labs(\n    title = 'Victorians most likely to rate their health as **Excellent** or **Very Good**',\n    subtitle = 'Self-assessed health status by states and territories',\n    caption = 'Source: National Health Survey, 2022') +\n  theme(\n    plot.title.position = 'plot',\n    plot.title = element_markdown(),\n    panel.background = element_blank(),\n    axis.ticks.y = element_blank(),\n    legend.position = \"none\"\n  )\n```\n\n::: {.cell-output-display}\n![](exercise3-4_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n:::\n\n\n# Colour in key words in the title\n\nTo colour in the words we have to use some basic HTML and CSS. In particular we will will wrap the key words in the `<span></span>` HTML tag and use the `style` attribute to change the colour. \n\n::: {.aside}\nDon't worry if this is new to you, you can copy the code provided for now, and apply the same patterns elsewhere. HTML and CSS are core web technologies so it is worth learning the basics of these if you are going to be doing doing a lot of visualisation in R, especially if you are working with tools like shiny or quarto. A little knowledge in this area will really help elevate your outputs! [Here](https://albert-rapp.de/posts/16_html_css_for_r/16_html_css_for_r.html) is a nice summary from the wonderful [Albert Rapp](https://albert-rapp.de/). \n:::\n\nThe colours are set to <span style=\"color: #1A9641;\">**#1A9641**</span> and <span style=\"color: #A6D96A;\">**#A6D96A**</span>' which are the last two colors from our colour palette `barCols`. To confirm this you try entering `barCols` in the console. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nbarCols\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"#D7191C\" \"#FDAE61\" \"#FFFFBF\" \"#A6D96A\" \"#1A9641\"\n```\n\n\n:::\n:::\n\n::: {.cell source-line-numbers='23'}\n\n```{.r .numberLines .cell-code  code-fold=\"true\"}\n# Add this to your loaded libraries\nlibrary(ggtext)\n\n# Bold font in title\nggplot(\n  data=df1Plot,\n  aes(x = percent, \n      y = fct_reorder(state, totalHealthy), \n      fill = status,\n      color = status,\n      label = paste0(format(percent, nsmall=1), '%'))) + \n  geom_col(position = position_stack(reverse = TRUE),\n           color = \"white\") +\n  geom_text(\n    position = position_stack(reverse = TRUE),\n    size = 8/.pt, \n    hjust = 1.1) +\n  scale_fill_manual(name = NULL, values = barCols) +\n  scale_colour_manual(name = NULL, values = label_text_colors) +\n  scale_y_discrete(NULL) +\n  scale_x_continuous(NULL) +\n  labs(\n    title = 'Victorians most likely to rate their health as <span style=\"color: #1A9641;\">**Excellent**</span> or <span style=\"color: #A6D96A;\">**Very Good**</span>',\n    subtitle = 'Self-assessed health status by states and territories',\n    caption = 'Source: National Health Survey, 2022') +\n  theme(\n    plot.title.position = 'plot',\n    plot.title = element_markdown(),\n    panel.background = element_blank(),\n    axis.ticks.y = element_blank(),\n    legend.position = \"none\"\n  )\n```\n\n::: {.cell-output-display}\n![](exercise3-4_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n# Adjust text hierarchy\n\nTo help distinguish the title, subtitle and caption we will make the following changes:\n\n* Put the subtitle in a bold font but with a medium grey colour.\n* Put the caption in a smaller font and light grey colour.\n\nThis can be done by setting the `size`, `color`, and `face` arguments in `element_text()`.\n\n::: {.aside}\nNote that the when we set `element_text(size=14)` the size argument is defined in points, so we don't have to divide by `.pts` lie we previously did when setting the size of the text labels in `geom_text()`\n:::\n\n\n::: {.cell source-line-numbers='26-27'}\n\n```{.r .numberLines .cell-code  code-fold=\"true\"}\n# Adjust text hierarchy\nggplot(\n  data=df1Plot,\n  aes(x = percent, \n      y = fct_reorder(state, totalHealthy), \n      fill = status,\n      color = status,\n      label = paste0(format(percent, nsmall=1), '%'))) + \n  geom_col(position = position_stack(reverse = TRUE),\n           color = \"white\") +\n  geom_text(\n    position = position_stack(reverse = TRUE),\n    size = 8/.pt, \n    hjust = 1.1) +\n  scale_fill_manual(name = NULL, values = barCols) +\n  scale_colour_manual(name = NULL, values = label_text_colors) +\n  scale_y_discrete(NULL) +\n  scale_x_continuous(NULL) +\n  labs(\n    title = 'Victorians most likely to rate their health as <span style=\"color: #1A9641;\">**Excellent**</span> or <span style=\"color: #A6D96A;\">**Very Good**</span>',\n    subtitle = 'Self-assessed health status by states and territories',\n    caption = 'Source: National Health Survey, 2022') +\n  theme(\n    plot.title.position = 'plot',\n    plot.title = element_markdown(size=14),\n    plot.subtitle = element_text(size=10, color = 'grey30', face = 'bold'),\n    plot.caption = element_text(size=8, color = 'grey60'),\n    panel.background = element_blank(),\n    axis.ticks.y = element_blank(),\n    legend.position = \"none\"\n  )\n```\n\n::: {.cell-output-display}\n![](exercise3-4_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}