{
  "hash": "7dea38d2ad84b58bdfdb8b5c6b9f03fb",
  "result": {
    "engine": "knitr",
    "markdown": "---\nformat: \n  revealjs:\n    theme: [night, ../custom.scss]\n    highlight-style: monokai\n    code-overflow: wrap\nfooter: '<a href=\"/lectures/overview.qmd\">{{< fa house >}}</a>'\nslide-number: c/t\n---\n\n::: {.cell}\n\n:::\n\n\n\n\n## Data cleaning with `dplyr` {.title-slide}\n\n<img src=\"../images/dplyr.png\"></img>\n\n\n## R Projects\n\n>We use R projects to keep all our code and files organised in a single space\n\n![[Artwork by @allison_horst](https://twitter.com/allison_horst)](../images/horst/rproject-skater.png){align='center'}\n\n\n## Absolute paths \n\n\n::: {.cell}\n\n```{.r .cell-code}\nsetwd(\"/Users/z3509778/Library/CloudStorage/OneDrive-UNSW/Data Vis Workshop/CourseSite\")\n```\n:::\n\n\n. . . \n\n<br>\n\n> If the first line of your R script is\n>\n> `setwd(\"C:\\Users\\jenny\\path\\that\\only\\I\\have\")`\n>\n> I will come into your office and SET YOUR COMPUTER ON FIRE ðŸ”¥.\n\n::: {.figLab}\n\n---Jenny Bryan in [Project-oriented workflow](https://www.tidyverse.org/blog/2017/12/workflow-vs-script/)\n\n:::\n\n\n## Relative paths with `here::here()`\n\n![[Artwork by @allison_horst](https://twitter.com/allison_horst)](../images/horst/here-here.png){align='center'}\n\n\n## Mini-Exercise\n\n::: {.clock}\n\n{{< fa clock >}} 3 minutes\n\n:::\n\n### Are you `here` yet?\n\n:::: {.columns}\n\n::: {.column width=34%}\n\n<iframe style=\"width:100%;max-width:360px;height:360px;\" src=\"https://stopwatch-app.com/widget/timer?theme=dark&color=yellow&hrs=0&min=3&sec=0\" frameborder=\"0\"></iframe>\n  \n:::\n\n::: {.column width=66%}\n\n1. Enter `here::here()` at the console to see your current working directory. This should be where you saved your project!\n\n2. Enter `here::here(\"exercises\")` at the console. What happens?\n\n3. Enter `list.files(here::here(\"exercises\"))` at the console. Note that you don't need the full path! \n\n:::\n::::\n\n\n## {.center-slide}\n\n![](../images/horst/tidy-data-friends.jpg)\n\n::: {.figLab}\nIllustrations from the [Openscapes](https://www.openscapes.org/) blog [Tidy Data for reproducibility, efficiency, and collaboration](https://www.openscapes.org/blog/2020/10/12/tidy-data/) by Julia Lowndes and Allison Horst\"\n:::\n\n\n## {.center-slide}\n\n![](../images/horst/tidy-data-structure.jpg)\n\n::: {.figLab}\nIllustrations from the [Openscapes](https://www.openscapes.org/) blog [Tidy Data for reproducibility, efficiency, and collaboration](https://www.openscapes.org/blog/2020/10/12/tidy-data/) by Julia Lowndes and Allison Horst\"\n:::\n\n## An example: untidy data\n\n### Penguin species and island of habitation\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 Ã— 4\n# Groups:   species [3]\n  species   Biscoe Dream Torgersen\n  <fct>      <int> <int>     <int>\n1 Adelie        44    56        52\n2 Chinstrap     NA    68        NA\n3 Gentoo       124    NA        NA\n```\n\n\n:::\n:::\n\n\n## An example: tidy data\n\n### Penguin species and island of habitation\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 Ã— 3\n# Groups:   species [3]\n  species   island        n\n  <fct>     <fct>     <int>\n1 Adelie    Biscoe       44\n2 Adelie    Dream        56\n3 Adelie    Torgersen    52\n4 Chinstrap Dream        68\n5 Gentoo    Biscoe      124\n```\n\n\n:::\n:::\n\n\n## {.center-slide}\n\n![](../images/Adelie-Chinstrap-and-gentoo-penguin-species.jpg)\n\n\n## {.center-slide}\n\n![By [Daniel VÃ¤isÃ¤nen](https://github.com/dvaiman/TidyTuesday_Git/tree/master/2020/week_31)](../images/palmer-penguins.png)\n\n## \n\n:::: {.columns}\n\n::: {.column width=50%}\n![](../images/dplyr.png)\n:::\n\n::: {.column width=50%}\n>dplyr is a grammar of data manipulation, providing a **consistent set of verbs** that help you solve the most common data manipulation challenges\n\n::: {.figLab}\n[dplyr.tidyverse.org/](https://dplyr.tidyverse.org/)\n:::\n\n:::\n\n::::\n\n\n\n## `dplyr` verbs\n\n:::: {.columns}\n\n::: {.column width=50%}\n* `filter()`\n* `select()`\n* `rename()`\n* `mutate()`\n* `arrange()`\n* `slice()`\n* `case_when()`\n* `pivot_longer()`\n:::\n\n::: {.incremental .column width=50%}\n\n* Rename a variable?\n\n* Sort by a given variable?\n\n* Keep rows that match a condition?\n\n* Keep or drop columns?\n\n:::\n\n::::\n\n\n\n## Keep rows that match a condition with `filter()`\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code  code-line-numbers=\"1-9|1-2|4-5|7-9|9\"}\n# Load dplyr library\nlibrary(dplyr)\n\n# Load cars dataset\ndata(cars)\n\n# Filter rows\ncars |> \n  filter(speed == 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  speed dist\n1    10   18\n2    10   26\n3    10   34\n```\n\n\n:::\n:::\n\n\n. . . \n\n<br>\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code  code-line-numbers=\"1-3|3\"}\n# Filter rows\ncars |> \n  filter(speed >= 10 & dist <= 20)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  speed dist\n1    10   18\n2    11   17\n3    12   14\n4    12   20\n5    15   20\n```\n\n\n:::\n:::\n\n\n\n## Keep rows by position with `slice()`\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code}\n# Slice rows 1 to 3\ncars |> \n  slice(1:3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  speed dist\n1     4    2\n2     4   10\n3     7    4\n```\n\n\n:::\n:::\n\n\n. . . \n\n<br>\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code  code-line-numbers=\"1-3|3\"}\n# Slice last 3 rows\ncars |> \n  slice_tail(n=3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  speed dist\n1    24   93\n2    24  120\n3    25   85\n```\n\n\n:::\n:::\n\n\n. . . \n\n<br>\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code  code-line-numbers=\"1-3|3\"}\n# Slice speediest 3 rows\ncars |> \n  slice_max(speed, n=3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  speed dist\n1    25   85\n2    24   70\n3    24   92\n4    24   93\n5    24  120\n```\n\n\n:::\n:::\n\n\n\n## Keep or drop columns with `select()`\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code}\n# Filter rows\ncars |> \n  select(speed)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   speed\n1      4\n2      4\n3      7\n4      7\n5      8\n6      9\n7     10\n8     10\n9     10\n10    11\n11    11\n12    12\n13    12\n14    12\n15    12\n16    13\n17    13\n18    13\n19    13\n20    14\n21    14\n22    14\n23    14\n24    15\n25    15\n26    15\n27    16\n28    16\n29    17\n30    17\n31    17\n32    18\n33    18\n34    18\n35    18\n36    19\n37    19\n38    19\n39    20\n40    20\n41    20\n42    20\n43    20\n44    22\n45    23\n46    24\n47    24\n48    24\n49    24\n50    25\n```\n\n\n:::\n:::\n\n\n\n## Select columns with `select()`\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code}\n# Filter rows\ncars |> \n  select(starts_with(\"d\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   dist\n1     2\n2    10\n3     4\n4    22\n5    16\n6    10\n7    18\n8    26\n9    34\n10   17\n11   28\n12   14\n13   20\n14   24\n15   28\n16   26\n17   34\n18   34\n19   46\n20   26\n21   36\n22   60\n23   80\n24   20\n25   26\n26   54\n27   32\n28   40\n29   32\n30   40\n31   50\n32   42\n33   56\n34   76\n35   84\n36   36\n37   46\n38   68\n39   32\n40   48\n41   52\n42   56\n43   64\n44   66\n45   54\n46   70\n47   92\n48   93\n49  120\n50   85\n```\n\n\n:::\n:::\n\n\n\n## Rename a variable with `rename()`\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code}\n# rename variable\ncars |> \n  rename(distance = dist)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   speed distance\n1      4        2\n2      4       10\n3      7        4\n4      7       22\n5      8       16\n6      9       10\n7     10       18\n8     10       26\n9     10       34\n10    11       17\n11    11       28\n12    12       14\n13    12       20\n14    12       24\n15    12       28\n16    13       26\n17    13       34\n18    13       34\n19    13       46\n20    14       26\n21    14       36\n22    14       60\n23    14       80\n24    15       20\n25    15       26\n26    15       54\n27    16       32\n28    16       40\n29    17       32\n30    17       40\n31    17       50\n32    18       42\n33    18       56\n34    18       76\n35    18       84\n36    19       36\n37    19       46\n38    19       68\n39    20       32\n40    20       48\n41    20       52\n42    20       56\n43    20       64\n44    22       66\n45    23       54\n46    24       70\n47    24       92\n48    24       93\n49    24      120\n50    25       85\n```\n\n\n:::\n:::\n\n\n\n\n## Create new variables with `mutate()`\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code  code-line-numbers=\"1-5|3-5|4\"}\n# Filter rows\ncars |> \n  mutate(\n    time = dist / speed\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   speed dist      time\n1      4    2 0.5000000\n2      4   10 2.5000000\n3      7    4 0.5714286\n4      7   22 3.1428571\n5      8   16 2.0000000\n6      9   10 1.1111111\n7     10   18 1.8000000\n8     10   26 2.6000000\n9     10   34 3.4000000\n10    11   17 1.5454545\n11    11   28 2.5454545\n12    12   14 1.1666667\n13    12   20 1.6666667\n14    12   24 2.0000000\n15    12   28 2.3333333\n16    13   26 2.0000000\n17    13   34 2.6153846\n18    13   34 2.6153846\n19    13   46 3.5384615\n20    14   26 1.8571429\n21    14   36 2.5714286\n22    14   60 4.2857143\n23    14   80 5.7142857\n24    15   20 1.3333333\n25    15   26 1.7333333\n26    15   54 3.6000000\n27    16   32 2.0000000\n28    16   40 2.5000000\n29    17   32 1.8823529\n30    17   40 2.3529412\n31    17   50 2.9411765\n32    18   42 2.3333333\n33    18   56 3.1111111\n34    18   76 4.2222222\n35    18   84 4.6666667\n36    19   36 1.8947368\n37    19   46 2.4210526\n38    19   68 3.5789474\n39    20   32 1.6000000\n40    20   48 2.4000000\n41    20   52 2.6000000\n42    20   56 2.8000000\n43    20   64 3.2000000\n44    22   66 3.0000000\n45    23   54 2.3478261\n46    24   70 2.9166667\n47    24   92 3.8333333\n48    24   93 3.8750000\n49    24  120 5.0000000\n50    25   85 3.4000000\n```\n\n\n:::\n:::\n\n\n\n## Create new variables with `mutate()`\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code  code-line-numbers=\"1-7|4-6\"}\n# Filter rows\ncars |> \n  mutate(\n    class = ifelse(speed >= 10, \n                   \"fast\",\n                   \"slow\")\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   speed dist class\n1      4    2  slow\n2      4   10  slow\n3      7    4  slow\n4      7   22  slow\n5      8   16  slow\n6      9   10  slow\n7     10   18  fast\n8     10   26  fast\n9     10   34  fast\n10    11   17  fast\n11    11   28  fast\n12    12   14  fast\n13    12   20  fast\n14    12   24  fast\n15    12   28  fast\n16    13   26  fast\n17    13   34  fast\n18    13   34  fast\n19    13   46  fast\n20    14   26  fast\n21    14   36  fast\n22    14   60  fast\n23    14   80  fast\n24    15   20  fast\n25    15   26  fast\n26    15   54  fast\n27    16   32  fast\n28    16   40  fast\n29    17   32  fast\n30    17   40  fast\n31    17   50  fast\n32    18   42  fast\n33    18   56  fast\n34    18   76  fast\n35    18   84  fast\n36    19   36  fast\n37    19   46  fast\n38    19   68  fast\n39    20   32  fast\n40    20   48  fast\n41    20   52  fast\n42    20   56  fast\n43    20   64  fast\n44    22   66  fast\n45    23   54  fast\n46    24   70  fast\n47    24   92  fast\n48    24   93  fast\n49    24  120  fast\n50    25   85  fast\n```\n\n\n:::\n:::\n\n\n\n## Create new variables with `mutate()`\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code  code-line-numbers=\"1-8|4|5-7\"}\n# Filter rows\ncars |> \n  mutate(\n    time = dist / speed,\n    class = ifelse(speed >= 10, \n                   \"fast\",\n                   \"slow\")\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   speed dist      time class\n1      4    2 0.5000000  slow\n2      4   10 2.5000000  slow\n3      7    4 0.5714286  slow\n4      7   22 3.1428571  slow\n5      8   16 2.0000000  slow\n6      9   10 1.1111111  slow\n7     10   18 1.8000000  fast\n8     10   26 2.6000000  fast\n9     10   34 3.4000000  fast\n10    11   17 1.5454545  fast\n11    11   28 2.5454545  fast\n12    12   14 1.1666667  fast\n13    12   20 1.6666667  fast\n14    12   24 2.0000000  fast\n15    12   28 2.3333333  fast\n16    13   26 2.0000000  fast\n17    13   34 2.6153846  fast\n18    13   34 2.6153846  fast\n19    13   46 3.5384615  fast\n20    14   26 1.8571429  fast\n21    14   36 2.5714286  fast\n22    14   60 4.2857143  fast\n23    14   80 5.7142857  fast\n24    15   20 1.3333333  fast\n25    15   26 1.7333333  fast\n26    15   54 3.6000000  fast\n27    16   32 2.0000000  fast\n28    16   40 2.5000000  fast\n29    17   32 1.8823529  fast\n30    17   40 2.3529412  fast\n31    17   50 2.9411765  fast\n32    18   42 2.3333333  fast\n33    18   56 3.1111111  fast\n34    18   76 4.2222222  fast\n35    18   84 4.6666667  fast\n36    19   36 1.8947368  fast\n37    19   46 2.4210526  fast\n38    19   68 3.5789474  fast\n39    20   32 1.6000000  fast\n40    20   48 2.4000000  fast\n41    20   52 2.6000000  fast\n42    20   56 2.8000000  fast\n43    20   64 3.2000000  fast\n44    22   66 3.0000000  fast\n45    23   54 2.3478261  fast\n46    24   70 2.9166667  fast\n47    24   92 3.8333333  fast\n48    24   93 3.8750000  fast\n49    24  120 5.0000000  fast\n50    25   85 3.4000000  fast\n```\n\n\n:::\n:::\n\n\n\n## Create more complex variables with `case_when()`\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code  code-line-numbers=\"1-9|3,9|4,8|5|6|7\"}\n# Create a new variable\ncars |> \n  mutate(\n    class = case_when(\n      speed <= 4 ~ \"slow\", \n      speed <= 10 ~ \"average\", \n      .default = \"fast\"\n    )\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   speed dist   class\n1      4    2    slow\n2      4   10    slow\n3      7    4 average\n4      7   22 average\n5      8   16 average\n6      9   10 average\n7     10   18 average\n8     10   26 average\n9     10   34 average\n10    11   17    fast\n11    11   28    fast\n12    12   14    fast\n13    12   20    fast\n14    12   24    fast\n15    12   28    fast\n16    13   26    fast\n17    13   34    fast\n18    13   34    fast\n19    13   46    fast\n20    14   26    fast\n21    14   36    fast\n22    14   60    fast\n23    14   80    fast\n24    15   20    fast\n25    15   26    fast\n26    15   54    fast\n27    16   32    fast\n28    16   40    fast\n29    17   32    fast\n30    17   40    fast\n31    17   50    fast\n32    18   42    fast\n33    18   56    fast\n34    18   76    fast\n35    18   84    fast\n36    19   36    fast\n37    19   46    fast\n38    19   68    fast\n39    20   32    fast\n40    20   48    fast\n41    20   52    fast\n42    20   56    fast\n43    20   64    fast\n44    22   66    fast\n45    23   54    fast\n46    24   70    fast\n47    24   92    fast\n48    24   93    fast\n49    24  120    fast\n50    25   85    fast\n```\n\n\n:::\n:::\n\n\n## Sort variables with `arrange()`\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code}\n# Sort by speed\ncars |> \n  arrange(speed)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   speed dist\n1      4    2\n2      4   10\n3      7    4\n4      7   22\n5      8   16\n6      9   10\n7     10   18\n8     10   26\n9     10   34\n10    11   17\n11    11   28\n12    12   14\n13    12   20\n14    12   24\n15    12   28\n16    13   26\n17    13   34\n18    13   34\n19    13   46\n20    14   26\n21    14   36\n22    14   60\n23    14   80\n24    15   20\n25    15   26\n26    15   54\n27    16   32\n28    16   40\n29    17   32\n30    17   40\n31    17   50\n32    18   42\n33    18   56\n34    18   76\n35    18   84\n36    19   36\n37    19   46\n38    19   68\n39    20   32\n40    20   48\n41    20   52\n42    20   56\n43    20   64\n44    22   66\n45    23   54\n46    24   70\n47    24   92\n48    24   93\n49    24  120\n50    25   85\n```\n\n\n:::\n:::\n\n\n## Sort variables with `arrange()`\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code}\n# Sort by speed\ncars |> \n  arrange(-speed, dist)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   speed dist\n1     25   85\n2     24   70\n3     24   92\n4     24   93\n5     24  120\n6     23   54\n7     22   66\n8     20   32\n9     20   48\n10    20   52\n11    20   56\n12    20   64\n13    19   36\n14    19   46\n15    19   68\n16    18   42\n17    18   56\n18    18   76\n19    18   84\n20    17   32\n21    17   40\n22    17   50\n23    16   32\n24    16   40\n25    15   20\n26    15   26\n27    15   54\n28    14   26\n29    14   36\n30    14   60\n31    14   80\n32    13   26\n33    13   34\n34    13   34\n35    13   46\n36    12   14\n37    12   20\n38    12   24\n39    12   28\n40    11   17\n41    11   28\n42    10   18\n43    10   26\n44    10   34\n45     9   10\n46     8   16\n47     7    4\n48     7   22\n49     4    2\n50     4   10\n```\n\n\n:::\n:::\n\n\n## The pipe operator `|>` {.smaller}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Sort by speed\ncars |> arrange(speed)\n```\n:::\n\n<br>\n\n::: {.incremental}\n* `|>` is called the pipe operator\n* It takes the object on the left and passes it to the first argument of the function on the right \n:::\n\n. . . \n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Equivalent to above code snippet\narrange(cars, speed)\n```\n:::\n\n\n<br>\n\n::: {.incremental}\n* We can use `|>` to chain multiple `dplyr` verbs \n* keyboard shortcut is Ctrl/Cmd + Shift + M\n:::\n\n\n## The pipe operator `|>`\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code  code-line-numbers=\"1-9|3|4|5|1-9\"}\n# Data prep\ncars |> \n  mutate(time = dist / speed) |> \n  arrange(-time) |> \n  slice(1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  speed dist     time\n1    14   80 5.714286\n```\n\n\n:::\n:::\n\n\n. . . \n\n<br>\n\nOften we will save the output of such a chain using the assignment operator `<-`\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code  code-line-numbers=\"1-9|2|7\"}\n# Data prep\nlongestTime <- cars |>\n  mutate(time = dist / speed) |> \n  arrange(-time) |> \n  slice(1)\n\nlongestTime\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  speed dist     time\n1    14   80 5.714286\n```\n\n\n:::\n:::\n\n\n## {background-image=\"../images/Pipe_baking_backAssign.gif\" background-size=\"contain\"}\n\n\n::: {.figLabBR} \nCreated by [Arthur Welle](https://github.com/arthurwelle)\n:::\n\n## The old pipe operator `%>%` {.smaller}\n\nIf you've been using R for a while you may be familiar with the `%>%` pipe operator shipped with the `magrittr` package.\n\n. . . \n\n<br>\n\n:::: {.columns}\n\n::: {.column}\n\n::: {.cell}\n\n```{.r .cell-code}\n# Exactly the same thing!\ncars |> \n  mutate(time = dist / speed)  |> \n  arrange(-time)  |>  \n  slice(1)\n```\n:::\n\n:::\n\n::: {.column}\n\n::: {.cell}\n\n```{.r .cell-code}\n# Exactly the same thing!\ncars %>% \n  mutate(time = dist / speed) %>%\n  arrange(-time) %>% \n  slice(1)\n```\n:::\n\n:::\n\n::::\n\n<br>\n\n::: {.incremental}\n\n* For simple cases, `|>` and `%>%` behave the same\n* `|>` is simpler\n* `|>` is implemented in base R\n\n:::\n\n\n## A note on style\n\n:::: {.columns}\n\n::: {.column}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Data prep\ncars |> \n  mutate(time = dist / speed) |> \n  arrange(-time) |> \n  slice(1)\n```\n:::\n\n\n:::\n\n::: {.column .incremental}\n\n* Neat and easy to read!\n* Each verb on a new line\n* `|>` at end of line\n* Indentation\n* Use of spacing\n\n\n:::\n\n::::\n\n. . . \n\nAvoid this!\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Data prep\ncars|>mutate(time=dist-speed)|>arrange(-time)|>slice(1)\n```\n:::\n\n\n\n## Mini-Exercise\n\n::: {.clock}\n\n{{< fa clock >}} 10 minutes\n\n:::\n\n### Practice with dplyr!\n\n:::: {.columns}\n\n::: {.column width=34%}\n\n<iframe style=\"width:100%;max-width:360px;height:360px;\" src=\"https://stopwatch-app.com/widget/timer?theme=dark&color=yellow&hrs=0&min=10&sec=0\" frameborder=\"0\"></iframe>\n  \n:::\n\n::: {.column width=66%}\n\n1. In the RStudio menu navigate to `Tools > Global Options > Code` and tick the box to use the native pipe operator\n\n2. We will use the `penguins` dataset shipped in the `palmerpenguins` library. Determine the longest bill length among the five lightest female penguins from the Gentoo species.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Code to get you started\nlibrary(palmerpenguins) \n\npenguins |> \n  filter(species == )\n```\n:::\n\n\n:::\n\n::::\n\n#### \n\n\n\n## Factors in R {.smaller}\n\nEarlier we used `case_when()` to create a categorical variable with three categories: fast, average, and slow.\n\n\n::: {.cell output-location='column'}\n\n```{.r .cell-code}\n# Create a new variable\ncars |> \n  mutate(\n    class = case_when(\n      speed <= 4 ~ \"slow\", \n      speed <= 10 ~ \"average\", \n      .default = \"fast\"\n    )) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   speed dist   class\n1      4    2    slow\n2      4   10    slow\n3      7    4 average\n4      7   22 average\n5      8   16 average\n6      9   10 average\n7     10   18 average\n8     10   26 average\n9     10   34 average\n10    11   17    fast\n11    11   28    fast\n12    12   14    fast\n13    12   20    fast\n14    12   24    fast\n15    12   28    fast\n16    13   26    fast\n17    13   34    fast\n18    13   34    fast\n19    13   46    fast\n20    14   26    fast\n21    14   36    fast\n22    14   60    fast\n23    14   80    fast\n24    15   20    fast\n25    15   26    fast\n26    15   54    fast\n27    16   32    fast\n28    16   40    fast\n29    17   32    fast\n30    17   40    fast\n31    17   50    fast\n32    18   42    fast\n33    18   56    fast\n34    18   76    fast\n35    18   84    fast\n36    19   36    fast\n37    19   46    fast\n38    19   68    fast\n39    20   32    fast\n40    20   48    fast\n41    20   52    fast\n42    20   56    fast\n43    20   64    fast\n44    22   66    fast\n45    23   54    fast\n46    24   70    fast\n47    24   92    fast\n48    24   93    fast\n49    24  120    fast\n50    25   85    fast\n```\n\n\n:::\n:::\n\n\n## Factors in R {.smaller}\n\nWe can `group_by()` this new variable, then use `summarise()` to calculate the average speed for each group.\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code  code-line-numbers=\"1-19|9|10-19\"}\n# Create a new variable\ncars |> \n  mutate(\n    class = case_when(\n      speed <= 4 ~ \"slow\", \n      speed <= 10 ~ \"average\", \n      .default = \"fast\"\n    )) |> \n  group_by(class) |>  \n  summarise(\n    mean = mean(speed)\n  ) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 Ã— 2\n  class    mean\n  <chr>   <dbl>\n1 average  8.71\n2 fast    17.1 \n3 slow     4   \n```\n\n\n:::\n:::\n\n\n. . . \n\nNotice the ordering of the output! This is because the new `class` variable is a **character** vector.\n\n\n## Factors in R {.smaller}\n\nFactors are useful for handling categorical variables.\n\n::: {.incremental}\n\n* Category names\n* Ordering categories\n* Mapping colors to categories (later!)\n\n:::\n\n. . .\n\nTo create a factor you must start by creating a list of the valid **levels**:\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code  code-line-numbers=\"1-9|1-4|6-8\"}\n# Vector of valid levels\nclassLevels <- c('slow', \n                 'average', \n                 'fast')\n\n# Create factor variable\nfactor(c('fast', 'slow'), \n       levels = classLevels) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] fast slow\nLevels: slow average fast\n```\n\n\n:::\n:::\n\n\n## Factors in R {.smaller}\n\nLet's put it all together!\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code  code-line-numbers=\"1-19|5-10|5,10\"}\n# Create a new variable\ncars |> \n  mutate(\n    class = \n      factor(\n        case_when(\n          speed <= 4 ~ \"slow\", \n          speed <= 10 ~ \"average\", \n          .default = \"fast\"),\n        levels = classLevels)) |> \n  group_by(class) |>  \n  summarise(\n    mean = mean(speed)\n  ) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 Ã— 2\n  class    mean\n  <fct>   <dbl>\n1 slow     4   \n2 average  8.71\n3 fast    17.1 \n```\n\n\n:::\n:::\n\n\n. . .\n\n<br>\n\nNow the ordering is by speed class, not alphabetically!\n\n\n## Moving from wide to long data\n\nConsider the untidy dataset we encountered earlier:\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 Ã— 4\n# Groups:   species [3]\n  species   Biscoe Dream Torgersen\n  <fct>      <int> <int>     <int>\n1 Adelie        44    56        52\n2 Chinstrap     NA    68        NA\n3 Gentoo       124    NA        NA\n```\n\n\n:::\n:::\n\n\n## Moving from wide to long data\n\nWe can move from wide format to long long format using `pivot_longer()` from the `tidyr` package.\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code  code-line-numbers=\"1-6|4-6\"}\nlibrary(tidyr)\n\npenguins_wide |> \n  pivot_longer(c(Biscoe, \n                 Dream, \n                 Torgersen))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 9 Ã— 3\n# Groups:   species [3]\n  species   name      value\n  <fct>     <chr>     <int>\n1 Adelie    Biscoe       44\n2 Adelie    Dream        56\n3 Adelie    Torgersen    52\n4 Chinstrap Biscoe       NA\n5 Chinstrap Dream        68\n6 Chinstrap Torgersen    NA\n7 Gentoo    Biscoe      124\n8 Gentoo    Dream        NA\n9 Gentoo    Torgersen    NA\n```\n\n\n:::\n:::\n\n\n## Moving from wide to long data\n\nWe can move from wide format to long long format using `pivot_longer()` from the `tidyr` package.\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code  code-line-numbers=\"1-8|7|8\"}\nlibrary(tidyr)\n\npenguins_wide |> \n  pivot_longer(c(Biscoe, \n                 Dream, \n                 Torgersen),\n  names_to = \"island\",\n  values_to = \"count\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 9 Ã— 3\n# Groups:   species [3]\n  species   island    count\n  <fct>     <chr>     <int>\n1 Adelie    Biscoe       44\n2 Adelie    Dream        56\n3 Adelie    Torgersen    52\n4 Chinstrap Biscoe       NA\n5 Chinstrap Dream        68\n6 Chinstrap Torgersen    NA\n7 Gentoo    Biscoe      124\n8 Gentoo    Dream        NA\n9 Gentoo    Torgersen    NA\n```\n\n\n:::\n:::\n\n\n\n## Mini-Exercise\n\n::: {.clock}\n\n{{< fa clock >}} 10 minutes\n\n:::\n\n### Practice pivot wider\n\n:::: {.columns}\n\n::: {.column width=34%}\n\n<iframe style=\"width:100%;max-width:360px;height:360px;\" src=\"https://stopwatch-app.com/widget/timer?theme=dark&color=yellow&hrs=0&min=10&sec=0\" frameborder=\"0\"></iframe>\n  \n:::\n\n::: {.column width=66%}\n\n::: {.panel-tabset}\n\n### Task\n\n1. Use the Starter Code to read in the file **exercises/2-raw-data/pivot_longer_exercise.xlsx** as an R dataframe\n\n1. Pivot the data to long format, creating new variables **sex** and **count**\n\n1. Make the variable **sex** a factor variable with levels 'female' and 'male'\n\n### Starter code\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load library\nlibrary(readxl)\n\n# Set the location of the data\ndataLocation <- here::here('exercises/2-raw-data/pivot_longer_exercise.xlsx')\n\n# Read in the data\ndf <- read_excel(\n        path = dataLocation,\n        sheet = 'Sheet1')\n```\n:::\n\n\n\n:::\n\n:::\n::::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}